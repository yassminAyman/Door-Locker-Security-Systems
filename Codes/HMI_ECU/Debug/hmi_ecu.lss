
hmi_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00002e60  00002ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080011a  0080011a  00002fae  2**0
                  ALLOC
  3 .stab         00003120  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000138e  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000745e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000759e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000770e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009357  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a242  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_7>
      20:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 0c 	call	0x18ae	; 0x18ae <main>
      8a:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e0       	ldi	r26, 0x05	; 5
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e0       	ldi	r24, 0x05	; 5
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_writeByte>:
/* Description: Save a byte at the external EEPROM
 * Input: the address in the EEPROM , and data to be stored
 * Return: The status of the process
 * */
uint8 EEPROM_writeByte(uint16 address, uint8 data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_writeByte+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
     b58:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TWI_start>
	/*Check if it's Sent*/
	if(TWI_getStatus() != TWI_START)
     b5c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	11 f0       	breq	.+4      	; 0xb68 <EEPROM_writeByte+0x22>
	{
		return ERROR;
     b64:	1c 82       	std	Y+4, r1	; 0x04
     b66:	28 c0       	rjmp	.+80     	; 0xbb8 <EEPROM_writeByte+0x72>


	/*Send the device address:
	 * 0b1010 + [ A10 A9 A8 (from the EEPROM address) ] by masking + Write bit identifier (0)
	 * */
	TWI_writeByte((uint8)(0xA0 | ((address & 0x0700)>>7)));
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	80 70       	andi	r24, 0x00	; 0
     b6e:	97 70       	andi	r25, 0x07	; 7
     b70:	88 0f       	add	r24, r24
     b72:	89 2f       	mov	r24, r25
     b74:	88 1f       	adc	r24, r24
     b76:	99 0b       	sbc	r25, r25
     b78:	91 95       	neg	r25
     b7a:	80 6a       	ori	r24, 0xA0	; 160
     b7c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TWI_writeByte>
	/*Check if the master transmit the address of the slave and the slave response by ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
     b80:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     b84:	88 31       	cpi	r24, 0x18	; 24
     b86:	11 f0       	breq	.+4      	; 0xb8c <EEPROM_writeByte+0x46>
	{
		return ERROR;
     b88:	1c 82       	std	Y+4, r1	; 0x04
     b8a:	16 c0       	rjmp	.+44     	; 0xbb8 <EEPROM_writeByte+0x72>
	}


	/*Send the cont. of the device address which is the memory location:*/
	TWI_writeByte((uint8)address);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     b92:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     b96:	88 32       	cpi	r24, 0x28	; 40
     b98:	11 f0       	breq	.+4      	; 0xb9e <EEPROM_writeByte+0x58>
	{
		return ERROR;
     b9a:	1c 82       	std	Y+4, r1	; 0x04
     b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <EEPROM_writeByte+0x72>
	}


	/* write data to eeprom */
	TWI_writeByte(data);
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ba4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x6a>
	{
		return ERROR;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <EEPROM_writeByte+0x72>
	}


	/* Send the Stop Bit */
	TWI_stop();
     bb0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <TWI_stop>


	return SUCCESS;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 83       	std	Y+4, r24	; 0x04
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <EEPROM_readByte>:
/* Description: Read a byte that is stored at the external EEPROM
 * Input: the address in the EEPROM , pointer to a var to store the readed data
 * Return: The status of the process
 * */
uint8 EEPROM_readByte(uint16 address, uint8 *data)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <EEPROM_readByte+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x8>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	7c 83       	std	Y+4, r23	; 0x04
     bdc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
     bde:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TWI_start>
	/*Check if it's Sent*/
	if(TWI_getStatus() != TWI_START)
     be2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	11 f0       	breq	.+4      	; 0xbee <EEPROM_readByte+0x26>
	{
		return ERROR;
     bea:	1d 82       	std	Y+5, r1	; 0x05
     bec:	44 c0       	rjmp	.+136    	; 0xc76 <EEPROM_readByte+0xae>


	/*Send the device address:
	 * 0b1010 + [ A10 A9 A8 (from the EEPROM address) ] by masking + Write bit identifier (0)
	 * */
	TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7)));
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	80 70       	andi	r24, 0x00	; 0
     bf4:	97 70       	andi	r25, 0x07	; 7
     bf6:	88 0f       	add	r24, r24
     bf8:	89 2f       	mov	r24, r25
     bfa:	88 1f       	adc	r24, r24
     bfc:	99 0b       	sbc	r25, r25
     bfe:	91 95       	neg	r25
     c00:	80 6a       	ori	r24, 0xA0	; 160
     c02:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TWI_writeByte>
	/*Check if the master transmit the address of the slave and the slave response by ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c06:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     c0a:	88 31       	cpi	r24, 0x18	; 24
     c0c:	11 f0       	breq	.+4      	; 0xc12 <EEPROM_readByte+0x4a>
	{
		return ERROR;
     c0e:	1d 82       	std	Y+5, r1	; 0x05
     c10:	32 c0       	rjmp	.+100    	; 0xc76 <EEPROM_readByte+0xae>
	}


	/*Send the cont. of the device address which is the memory location:*/
	TWI_writeByte((uint8)address);
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c18:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     c1c:	88 32       	cpi	r24, 0x28	; 40
     c1e:	11 f0       	breq	.+4      	; 0xc24 <EEPROM_readByte+0x5c>
	{
		return ERROR;
     c20:	1d 82       	std	Y+5, r1	; 0x05
     c22:	29 c0       	rjmp	.+82     	; 0xc76 <EEPROM_readByte+0xae>
	}


	/* Send the Start Bit to Change the flow of the data*/
	TWI_start();
     c24:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TWI_start>
	/*Check if it's Sent*/
	if(TWI_getStatus() != TWI_REPEATED_START
     c28:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     c2c:	80 31       	cpi	r24, 0x10	; 16
     c2e:	11 f0       	breq	.+4      	; 0xc34 <EEPROM_readByte+0x6c>
	)
	{
		return ERROR;
     c30:	1d 82       	std	Y+5, r1	; 0x05
     c32:	21 c0       	rjmp	.+66     	; 0xc76 <EEPROM_readByte+0xae>


	/*Send the device address:
	 * 0b1010 + [ A10 A9 A8 (from the EEPROM address) ] by masking + Read bit identifier (1)
	 * */
	TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	80 70       	andi	r24, 0x00	; 0
     c3a:	97 70       	andi	r25, 0x07	; 7
     c3c:	88 0f       	add	r24, r24
     c3e:	89 2f       	mov	r24, r25
     c40:	88 1f       	adc	r24, r24
     c42:	99 0b       	sbc	r25, r25
     c44:	91 95       	neg	r25
     c46:	81 6a       	ori	r24, 0xA1	; 161
     c48:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TWI_writeByte>
	/*Check if the master transmit the address of the slave and the slave response by ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_R_ACK)
     c4c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     c50:	80 34       	cpi	r24, 0x40	; 64
     c52:	11 f0       	breq	.+4      	; 0xc58 <EEPROM_readByte+0x90>
	{
		return ERROR;
     c54:	1d 82       	std	Y+5, r1	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <EEPROM_readByte+0xae>
	}



	/* Read Byte from Memory without send ACK */
	*data = TWI_readByteWithNACK();
     c58:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <TWI_readByteWithNACK>
     c5c:	eb 81       	ldd	r30, Y+3	; 0x03
     c5e:	fc 81       	ldd	r31, Y+4	; 0x04
     c60:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
     c62:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_getStatus>
     c66:	88 35       	cpi	r24, 0x58	; 88
     c68:	11 f0       	breq	.+4      	; 0xc6e <EEPROM_readByte+0xa6>
		return ERROR;
     c6a:	1d 82       	std	Y+5, r1	; 0x05
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <EEPROM_readByte+0xae>



	/* Send the Stop Bit */
	TWI_stop();
     c6e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <TWI_stop>



	return SUCCESS;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	8d 81       	ldd	r24, Y+5	; 0x05


}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <GPIO_setupPinDirection>:

/* Description: setup the pin direction
 * Input: port number, pin num, the required direction
 * Output: void
 * */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_Pin_Direction direction){
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <GPIO_setupPinDirection+0x6>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <GPIO_setupPinDirection+0x8>
     c90:	0f 92       	push	r0
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	6a 83       	std	Y+2, r22	; 0x02
     c9a:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the number of ports or pins is exceed our AVR*/
	if((port_num >= NUM_OF_PORTS) || (pin_num >=NUM_OF_PINS))
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	84 30       	cpi	r24, 0x04	; 4
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <GPIO_setupPinDirection+0x1c>
     ca2:	d5 c0       	rjmp	.+426    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	08 f0       	brcs	.+2      	; 0xcac <GPIO_setupPinDirection+0x24>
     caa:	d1 c0       	rjmp	.+418    	; 0xe4e <GPIO_setupPinDirection+0x1c6>

	}
	else
	{
		/*switch on the number of the port*/
		switch(port_num){
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	3d 83       	std	Y+5, r19	; 0x05
     cb4:	2c 83       	std	Y+4, r18	; 0x04
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <GPIO_setupPinDirection+0x3a>
     cc0:	43 c0       	rjmp	.+134    	; 0xd48 <GPIO_setupPinDirection+0xc0>
     cc2:	2c 81       	ldd	r18, Y+4	; 0x04
     cc4:	3d 81       	ldd	r19, Y+5	; 0x05
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <GPIO_setupPinDirection+0x4e>
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	71 f0       	breq	.+28     	; 0xcf0 <GPIO_setupPinDirection+0x68>
     cd4:	bc c0       	rjmp	.+376    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
     cd6:	2c 81       	ldd	r18, Y+4	; 0x04
     cd8:	3d 81       	ldd	r19, Y+5	; 0x05
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <GPIO_setupPinDirection+0x5a>
     ce0:	5f c0       	rjmp	.+190    	; 0xda0 <GPIO_setupPinDirection+0x118>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <GPIO_setupPinDirection+0x66>
     cec:	85 c0       	rjmp	.+266    	; 0xdf8 <GPIO_setupPinDirection+0x170>
     cee:	af c0       	rjmp	.+350    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction==Pin_OUTPUT){
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	a1 f4       	brne	.+40     	; 0xd1e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
     cf6:	aa e3       	ldi	r26, 0x3A	; 58
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <GPIO_setupPinDirection+0x8c>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <GPIO_setupPinDirection+0x88>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	98 c0       	rjmp	.+304    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
     d1e:	aa e3       	ldi	r26, 0x3A	; 58
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e3       	ldi	r30, 0x3A	; 58
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <GPIO_setupPinDirection+0xb4>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <GPIO_setupPinDirection+0xb0>
     d40:	80 95       	com	r24
     d42:	84 23       	and	r24, r20
     d44:	8c 93       	st	X, r24
     d46:	83 c0       	rjmp	.+262    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction==Pin_OUTPUT){
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	a1 f4       	brne	.+40     	; 0xd76 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
     d4e:	a7 e3       	ldi	r26, 0x37	; 55
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e7 e3       	ldi	r30, 0x37	; 55
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <GPIO_setupPinDirection+0xe4>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <GPIO_setupPinDirection+0xe0>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	6c c0       	rjmp	.+216    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
     d76:	a7 e3       	ldi	r26, 0x37	; 55
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <GPIO_setupPinDirection+0x10c>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <GPIO_setupPinDirection+0x108>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	57 c0       	rjmp	.+174    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction==Pin_OUTPUT){
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	a1 f4       	brne	.+40     	; 0xdce <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
     da6:	a4 e3       	ldi	r26, 0x34	; 52
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e4 e3       	ldi	r30, 0x34	; 52
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <GPIO_setupPinDirection+0x13c>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <GPIO_setupPinDirection+0x138>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	40 c0       	rjmp	.+128    	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
     dce:	a4 e3       	ldi	r26, 0x34	; 52
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e4 e3       	ldi	r30, 0x34	; 52
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <GPIO_setupPinDirection+0x164>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <GPIO_setupPinDirection+0x160>
     df0:	80 95       	com	r24
     df2:	84 23       	and	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	2b c0       	rjmp	.+86     	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction==Pin_OUTPUT){
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	a1 f4       	brne	.+40     	; 0xe26 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
     dfe:	a1 e3       	ldi	r26, 0x31	; 49
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e1 e3       	ldi	r30, 0x31	; 49
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <GPIO_setupPinDirection+0x194>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <GPIO_setupPinDirection+0x190>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	14 c0       	rjmp	.+40     	; 0xe4e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
     e26:	a1 e3       	ldi	r26, 0x31	; 49
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e1 e3       	ldi	r30, 0x31	; 49
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <GPIO_setupPinDirection+0x1bc>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <GPIO_setupPinDirection+0x1b8>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <GPIO_writePin>:
/* Description: write on a pin
 * Input: port number, pin number, the required value
 * Output: void
 * */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <GPIO_writePin+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <GPIO_writePin+0x8>
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	6a 83       	std	Y+2, r22	; 0x02
     e70:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the number of ports or pins is exceed our AVR*/
	if((port_num >= NUM_OF_PORTS) || (pin_num >=NUM_OF_PINS))
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	08 f0       	brcs	.+2      	; 0xe7a <GPIO_writePin+0x1c>
     e78:	d5 c0       	rjmp	.+426    	; 0x1024 <GPIO_writePin+0x1c6>
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	88 30       	cpi	r24, 0x08	; 8
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <GPIO_writePin+0x24>
     e80:	d1 c0       	rjmp	.+418    	; 0x1024 <GPIO_writePin+0x1c6>

	}
	else
	{
		/*switch on the number of the port*/
		switch(port_num)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	3d 83       	std	Y+5, r19	; 0x05
     e8a:	2c 83       	std	Y+4, r18	; 0x04
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <GPIO_writePin+0x3a>
     e96:	43 c0       	rjmp	.+134    	; 0xf1e <GPIO_writePin+0xc0>
     e98:	2c 81       	ldd	r18, Y+4	; 0x04
     e9a:	3d 81       	ldd	r19, Y+5	; 0x05
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	2c f4       	brge	.+10     	; 0xeac <GPIO_writePin+0x4e>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	71 f0       	breq	.+28     	; 0xec6 <GPIO_writePin+0x68>
     eaa:	bc c0       	rjmp	.+376    	; 0x1024 <GPIO_writePin+0x1c6>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <GPIO_writePin+0x5a>
     eb6:	5f c0       	rjmp	.+190    	; 0xf76 <GPIO_writePin+0x118>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	83 30       	cpi	r24, 0x03	; 3
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <GPIO_writePin+0x66>
     ec2:	85 c0       	rjmp	.+266    	; 0xfce <GPIO_writePin+0x170>
     ec4:	af c0       	rjmp	.+350    	; 0x1024 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH){
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	a1 f4       	brne	.+40     	; 0xef4 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
     ecc:	ab e3       	ldi	r26, 0x3B	; 59
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	eb e3       	ldi	r30, 0x3B	; 59
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <GPIO_writePin+0x8c>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <GPIO_writePin+0x88>
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	98 c0       	rjmp	.+304    	; 0x1024 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
     ef4:	ab e3       	ldi	r26, 0x3B	; 59
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e3       	ldi	r30, 0x3B	; 59
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_writePin+0xb4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_writePin+0xb0>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	83 c0       	rjmp	.+262    	; 0x1024 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value== LOGIC_HIGH){
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	a1 f4       	brne	.+40     	; 0xf4c <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
     f24:	a8 e3       	ldi	r26, 0x38	; 56
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e3       	ldi	r30, 0x38	; 56
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <GPIO_writePin+0xe4>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <GPIO_writePin+0xe0>
     f46:	84 2b       	or	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	6c c0       	rjmp	.+216    	; 0x1024 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
     f4c:	a8 e3       	ldi	r26, 0x38	; 56
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e8 e3       	ldi	r30, 0x38	; 56
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <GPIO_writePin+0x10c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <GPIO_writePin+0x108>
     f6e:	80 95       	com	r24
     f70:	84 23       	and	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	57 c0       	rjmp	.+174    	; 0x1024 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f7c:	a5 e3       	ldi	r26, 0x35	; 53
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_writePin+0x13c>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_writePin+0x138>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	40 c0       	rjmp	.+128    	; 0x1024 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fa4:	a5 e3       	ldi	r26, 0x35	; 53
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_writePin+0x164>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_writePin+0x160>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	2b c0       	rjmp	.+86     	; 0x1024 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value== LOGIC_HIGH){
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	a1 f4       	brne	.+40     	; 0xffc <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
     fd4:	a2 e3       	ldi	r26, 0x32	; 50
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e2 e3       	ldi	r30, 0x32	; 50
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_writePin+0x194>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_writePin+0x190>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	14 c0       	rjmp	.+40     	; 0x1024 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
     ffc:	a2 e3       	ldi	r26, 0x32	; 50
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e2 e3       	ldi	r30, 0x32	; 50
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <GPIO_writePin+0x1bc>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <GPIO_writePin+0x1b8>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <GPIO_readPin>:
/* Description: Read data from a pin
 * Input: port number, pin number
 * Output: Read Data (uint8)
 * */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <GPIO_readPin+0x6>
    103a:	00 d0       	rcall	.+0      	; 0x103c <GPIO_readPin+0x8>
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	8a 83       	std	Y+2, r24	; 0x02
    1044:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value= LOGIC_LOW;
    1046:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >=NUM_OF_PINS))
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	08 f0       	brcs	.+2      	; 0x1050 <GPIO_readPin+0x1c>
    104e:	84 c0       	rjmp	.+264    	; 0x1158 <GPIO_readPin+0x124>
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	08 f0       	brcs	.+2      	; 0x1058 <GPIO_readPin+0x24>
    1056:	80 c0       	rjmp	.+256    	; 0x1158 <GPIO_readPin+0x124>
	{

	}
	else
	{
		switch(port_num){
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3d 83       	std	Y+5, r19	; 0x05
    1060:	2c 83       	std	Y+4, r18	; 0x04
    1062:	4c 81       	ldd	r20, Y+4	; 0x04
    1064:	5d 81       	ldd	r21, Y+5	; 0x05
    1066:	41 30       	cpi	r20, 0x01	; 1
    1068:	51 05       	cpc	r21, r1
    106a:	79 f1       	breq	.+94     	; 0x10ca <GPIO_readPin+0x96>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	91 05       	cpc	r25, r1
    1074:	34 f4       	brge	.+12     	; 0x1082 <GPIO_readPin+0x4e>
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	3d 81       	ldd	r19, Y+5	; 0x05
    107a:	21 15       	cp	r18, r1
    107c:	31 05       	cpc	r19, r1
    107e:	69 f0       	breq	.+26     	; 0x109a <GPIO_readPin+0x66>
    1080:	6b c0       	rjmp	.+214    	; 0x1158 <GPIO_readPin+0x124>
    1082:	4c 81       	ldd	r20, Y+4	; 0x04
    1084:	5d 81       	ldd	r21, Y+5	; 0x05
    1086:	42 30       	cpi	r20, 0x02	; 2
    1088:	51 05       	cpc	r21, r1
    108a:	b9 f1       	breq	.+110    	; 0x10fa <GPIO_readPin+0xc6>
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	9d 81       	ldd	r25, Y+5	; 0x05
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <GPIO_readPin+0x64>
    1096:	49 c0       	rjmp	.+146    	; 0x112a <GPIO_readPin+0xf6>
    1098:	5f c0       	rjmp	.+190    	; 0x1158 <GPIO_readPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    109a:	e9 e3       	ldi	r30, 0x39	; 57
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <GPIO_readPin+0x7e>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <GPIO_readPin+0x7a>
    10b6:	ca 01       	movw	r24, r20
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	88 23       	and	r24, r24
    10be:	19 f0       	breq	.+6      	; 0x10c6 <GPIO_readPin+0x92>
			{
				pin_value= LOGIC_HIGH;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	49 c0       	rjmp	.+146    	; 0x1158 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value=  LOGIC_LOW;
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	47 c0       	rjmp	.+142    	; 0x1158 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10ca:	e6 e3       	ldi	r30, 0x36	; 54
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_readPin+0xae>
    10de:	55 95       	asr	r21
    10e0:	47 95       	ror	r20
    10e2:	8a 95       	dec	r24
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_readPin+0xaa>
    10e6:	ca 01       	movw	r24, r20
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <GPIO_readPin+0xc2>
			{
				pin_value= LOGIC_HIGH;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	31 c0       	rjmp	.+98     	; 0x1158 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value=  LOGIC_LOW;
    10f6:	19 82       	std	Y+1, r1	; 0x01
    10f8:	2f c0       	rjmp	.+94     	; 0x1158 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10fa:	e3 e3       	ldi	r30, 0x33	; 51
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a9 01       	movw	r20, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_readPin+0xde>
    110e:	55 95       	asr	r21
    1110:	47 95       	ror	r20
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_readPin+0xda>
    1116:	ca 01       	movw	r24, r20
    1118:	81 70       	andi	r24, 0x01	; 1
    111a:	90 70       	andi	r25, 0x00	; 0
    111c:	88 23       	and	r24, r24
    111e:	19 f0       	breq	.+6      	; 0x1126 <GPIO_readPin+0xf2>
			{
				pin_value= LOGIC_HIGH;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	19 c0       	rjmp	.+50     	; 0x1158 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value=  LOGIC_LOW;
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	17 c0       	rjmp	.+46     	; 0x1158 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    112a:	e0 e3       	ldi	r30, 0x30	; 48
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_readPin+0x10e>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_readPin+0x10a>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	88 23       	and	r24, r24
    114e:	19 f0       	breq	.+6      	; 0x1156 <GPIO_readPin+0x122>
			{
				pin_value= LOGIC_HIGH;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value=  LOGIC_LOW;
    1156:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}

	}
	return pin_value;
    1158:	89 81       	ldd	r24, Y+1	; 0x01
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <GPIO_setupPortDirection>:
/* Description: setup the whole Port direction
 * Input: port number, the required direction
 * Output: void
 * */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PORT_Direction direction)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <GPIO_setupPortDirection+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <GPIO_setupPortDirection+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	90 f5       	brcc	.+100    	; 0x11e4 <GPIO_setupPortDirection+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3c 83       	std	Y+4, r19	; 0x04
    1188:	2b 83       	std	Y+3, r18	; 0x03
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	91 05       	cpc	r25, r1
    1192:	d1 f0       	breq	.+52     	; 0x11c8 <GPIO_setupPortDirection+0x5e>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <GPIO_setupPortDirection+0x3e>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 f0       	breq	.+24     	; 0x11be <GPIO_setupPortDirection+0x54>
    11a6:	1e c0       	rjmp	.+60     	; 0x11e4 <GPIO_setupPortDirection+0x7a>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <GPIO_setupPortDirection+0x68>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 05       	cpc	r25, r1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <GPIO_setupPortDirection+0x72>
    11bc:	13 c0       	rjmp	.+38     	; 0x11e4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11be:	ea e3       	ldi	r30, 0x3A	; 58
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
    11c6:	0e c0       	rjmp	.+28     	; 0x11e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11c8:	e7 e3       	ldi	r30, 0x37	; 55
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	80 83       	st	Z, r24
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11d2:	e4 e3       	ldi	r30, 0x34	; 52
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11dc:	e1 e3       	ldi	r30, 0x31	; 49
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <GPIO_writePort>:
/* Description: write on the whole Port
 * Input: port number, the required value
 * Output: void
 * */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <GPIO_writePort+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <GPIO_writePort+0x8>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	90 f5       	brcc	.+100    	; 0x126c <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3c 83       	std	Y+4, r19	; 0x04
    1210:	2b 83       	std	Y+3, r18	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	d1 f0       	breq	.+52     	; 0x1250 <GPIO_writePort+0x5e>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <GPIO_writePort+0x3e>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	61 f0       	breq	.+24     	; 0x1246 <GPIO_writePort+0x54>
    122e:	1e c0       	rjmp	.+60     	; 0x126c <GPIO_writePort+0x7a>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	81 f0       	breq	.+32     	; 0x125a <GPIO_writePort+0x68>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <GPIO_writePort+0x72>
    1244:	13 c0       	rjmp	.+38     	; 0x126c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1246:	eb e3       	ldi	r30, 0x3B	; 59
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	0e c0       	rjmp	.+28     	; 0x126c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	09 c0       	rjmp	.+18     	; 0x126c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	04 c0       	rjmp	.+8      	; 0x126c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1264:	e2 e3       	ldi	r30, 0x32	; 50
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
			break;
		}
	}
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_readPort>:
/* Description: Read data from The Port
 * Input: port number
 * Output: Read Data (uint8)
 * */
uint8 GPIO_readPort(uint8 port_num)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_readPort+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_readPort+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1288:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	90 f5       	brcc	.+100    	; 0x12f4 <GPIO_readPort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3c 83       	std	Y+4, r19	; 0x04
    1298:	2b 83       	std	Y+3, r18	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	d1 f0       	breq	.+52     	; 0x12d8 <GPIO_readPort+0x5e>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <GPIO_readPort+0x3e>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <GPIO_readPort+0x54>
    12b6:	1e c0       	rjmp	.+60     	; 0x12f4 <GPIO_readPort+0x7a>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <GPIO_readPort+0x68>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <GPIO_readPort+0x72>
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12ce:	e9 e3       	ldi	r30, 0x39	; 57
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12d8:	e6 e3       	ldi	r30, 0x36	; 54
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12e2:	e3 e3       	ldi	r30, 0x33	; 51
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12ec:	e0 e3       	ldi	r30, 0x30	; 48
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <enterPassword>:
/*Description: Take the char from keypad and store it in any string
 * Input: meant string
 * Output: void
 * */
void enterPassword(unsigned char *str)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	a0 97       	sbiw	r28, 0x20	; 32
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	98 a3       	std	Y+32, r25	; 0x20
    131a:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i=0;
    131c:	1e 8e       	std	Y+30, r1	; 0x1e
	unsigned char key;

	LCD_moveCursor(1,0);
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_moveCursor>

	key = KEYPAD_getPressedKey();
    1326:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <KEYPAD_getPressedKey>
    132a:	8d 8f       	std	Y+29, r24	; 0x1d
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	aa ef       	ldi	r26, 0xFA	; 250
    1332:	b3 e4       	ldi	r27, 0x43	; 67
    1334:	89 8f       	std	Y+25, r24	; 0x19
    1336:	9a 8f       	std	Y+26, r25	; 0x1a
    1338:	ab 8f       	std	Y+27, r26	; 0x1b
    133a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133c:	69 8d       	ldd	r22, Y+25	; 0x19
    133e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4a e7       	ldi	r20, 0x7A	; 122
    134a:	53 e4       	ldi	r21, 0x43	; 67
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	8d 8b       	std	Y+21, r24	; 0x15
    1356:	9e 8b       	std	Y+22, r25	; 0x16
    1358:	af 8b       	std	Y+23, r26	; 0x17
    135a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1370:	88 23       	and	r24, r24
    1372:	2c f4       	brge	.+10     	; 0x137e <enterPassword+0x7a>
		__ticks = 1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <enterPassword+0xf8>
	else if (__tmp > 65535)
    137e:	6d 89       	ldd	r22, Y+21	; 0x15
    1380:	7e 89       	ldd	r23, Y+22	; 0x16
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	4c f5       	brge	.+82     	; 0x13e8 <enterPassword+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1396:	69 8d       	ldd	r22, Y+25	; 0x19
    1398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    139c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9c 8b       	std	Y+20, r25	; 0x14
    13bc:	8b 8b       	std	Y+19, r24	; 0x13
    13be:	0f c0       	rjmp	.+30     	; 0x13de <enterPassword+0xda>
    13c0:	89 e1       	ldi	r24, 0x19	; 25
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9a 8b       	std	Y+18, r25	; 0x12
    13c6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13c8:	89 89       	ldd	r24, Y+17	; 0x11
    13ca:	9a 89       	ldd	r25, Y+18	; 0x12
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <enterPassword+0xc8>
    13d0:	9a 8b       	std	Y+18, r25	; 0x12
    13d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d4:	8b 89       	ldd	r24, Y+19	; 0x13
    13d6:	9c 89       	ldd	r25, Y+20	; 0x14
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	9c 8b       	std	Y+20, r25	; 0x14
    13dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	8b 89       	ldd	r24, Y+19	; 0x13
    13e0:	9c 89       	ldd	r25, Y+20	; 0x14
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f7       	brne	.-38     	; 0x13c0 <enterPassword+0xbc>
    13e6:	9b c0       	rjmp	.+310    	; 0x151e <enterPassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ea:	7e 89       	ldd	r23, Y+22	; 0x16
    13ec:	8f 89       	ldd	r24, Y+23	; 0x17
    13ee:	98 8d       	ldd	r25, Y+24	; 0x18
    13f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	9c 8b       	std	Y+20, r25	; 0x14
    13fa:	8b 8b       	std	Y+19, r24	; 0x13
    13fc:	8b 89       	ldd	r24, Y+19	; 0x13
    13fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1400:	98 8b       	std	Y+16, r25	; 0x10
    1402:	8f 87       	std	Y+15, r24	; 0x0f
    1404:	8f 85       	ldd	r24, Y+15	; 0x0f
    1406:	98 89       	ldd	r25, Y+16	; 0x10
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <enterPassword+0x104>
    140c:	98 8b       	std	Y+16, r25	; 0x10
    140e:	8f 87       	std	Y+15, r24	; 0x0f
    1410:	86 c0       	rjmp	.+268    	; 0x151e <enterPassword+0x21a>
	_delay_ms(500);
	/*Store the pass in the pass string until the user press '=' which is the Enter button:*/
	while(key != '=')
	{
		i=0;
    1412:	1e 8e       	std	Y+30, r1	; 0x1e
		str[i] = key;
    1414:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    141c:	98 a1       	ldd	r25, Y+32	; 0x20
    141e:	fc 01       	movw	r30, r24
    1420:	e2 0f       	add	r30, r18
    1422:	f3 1f       	adc	r31, r19
    1424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1426:	80 83       	st	Z, r24
		i++;
    1428:	8e 8d       	ldd	r24, Y+30	; 0x1e
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_displayCharacter('*');
    142e:	8a e2       	ldi	r24, 0x2A	; 42
    1430:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_displayCharacter>
		key = KEYPAD_getPressedKey();
    1434:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <KEYPAD_getPressedKey>
    1438:	8d 8f       	std	Y+29, r24	; 0x1d
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	aa ef       	ldi	r26, 0xFA	; 250
    1440:	b3 e4       	ldi	r27, 0x43	; 67
    1442:	8b 87       	std	Y+11, r24	; 0x0b
    1444:	9c 87       	std	Y+12, r25	; 0x0c
    1446:	ad 87       	std	Y+13, r26	; 0x0d
    1448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	98 87       	std	Y+8, r25	; 0x08
    1466:	a9 87       	std	Y+9, r26	; 0x09
    1468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <enterPassword+0x188>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	3f c0       	rjmp	.+126    	; 0x150a <enterPassword+0x206>
	else if (__tmp > 65535)
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <enterPassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <enterPassword+0x1e8>
    14ce:	89 e1       	ldi	r24, 0x19	; 25
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <enterPassword+0x1d6>
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <enterPassword+0x1ca>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <enterPassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <enterPassword+0x212>
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	LCD_moveCursor(1,0);

	key = KEYPAD_getPressedKey();
	_delay_ms(500);
	/*Store the pass in the pass string until the user press '=' which is the Enter button:*/
	while(key != '=')
    151e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1520:	8d 33       	cpi	r24, 0x3D	; 61
    1522:	09 f0       	breq	.+2      	; 0x1526 <enterPassword+0x222>
    1524:	76 cf       	rjmp	.-276    	; 0x1412 <enterPassword+0x10e>
		LCD_displayCharacter('*');
		key = KEYPAD_getPressedKey();
		_delay_ms(500);
	}
	/*Add '#' at the end of the string for the UART transmission */
	str[i]= '#';
    1526:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    152e:	98 a1       	ldd	r25, Y+32	; 0x20
    1530:	fc 01       	movw	r30, r24
    1532:	e2 0f       	add	r30, r18
    1534:	f3 1f       	adc	r31, r19
    1536:	83 e2       	ldi	r24, 0x23	; 35
    1538:	80 83       	st	Z, r24

}
    153a:	a0 96       	adiw	r28, 0x20	; 32
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <createPassword>:
 * then the user type the password again to check it and it is store in the array  "re_password"
 * Input: Addresses of the two arrays: "password" and "re_password"
 * Output: Void
 * */
void createPassword(unsigned char *password,unsigned char *re_password)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	62 97       	sbiw	r28, 0x12	; 18
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	98 8b       	std	Y+16, r25	; 0x10
    1562:	8f 87       	std	Y+15, r24	; 0x0f
    1564:	7a 8b       	std	Y+18, r23	; 0x12
    1566:	69 8b       	std	Y+17, r22	; 0x11
	/*Take Password using Keypad:*/
	LCD_clearScreen();
    1568:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
	LCD_displayString("Enter New Pass:");
    156c:	80 e6       	ldi	r24, 0x60	; 96
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
	enterPassword(password);
    1574:	8f 85       	ldd	r24, Y+15	; 0x0f
    1576:	98 89       	ldd	r25, Y+16	; 0x10
    1578:	0e 94 82 09 	call	0x1304	; 0x1304 <enterPassword>


	/*Re-enter the password:*/
	LCD_clearScreen();
    157c:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_moveCursor>
	LCD_displayString("Re-enter Pass:");
    1588:	80 e7       	ldi	r24, 0x70	; 112
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
	enterPassword(re_password);
    1590:	89 89       	ldd	r24, Y+17	; 0x11
    1592:	9a 89       	ldd	r25, Y+18	; 0x12
    1594:	0e 94 82 09 	call	0x1304	; 0x1304 <enterPassword>

	/*Send the password and the re-password to the control ECU to check if they are equel:*/
	UART_sendString(password);
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 89       	ldd	r25, Y+16	; 0x10
    159c:	0e 94 24 16 	call	0x2c48	; 0x2c48 <UART_sendString>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	aa ef       	ldi	r26, 0xFA	; 250
    15a6:	b3 e4       	ldi	r27, 0x43	; 67
    15a8:	8b 87       	std	Y+11, r24	; 0x0b
    15aa:	9c 87       	std	Y+12, r25	; 0x0c
    15ac:	ad 87       	std	Y+13, r26	; 0x0d
    15ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a e7       	ldi	r20, 0x7A	; 122
    15be:	53 e4       	ldi	r21, 0x43	; 67
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	8f 83       	std	Y+7, r24	; 0x07
    15ca:	98 87       	std	Y+8, r25	; 0x08
    15cc:	a9 87       	std	Y+9, r26	; 0x09
    15ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <createPassword+0xa6>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <createPassword+0x124>
	else if (__tmp > 65535)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <createPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	6b 85       	ldd	r22, Y+11	; 0x0b
    160c:	7c 85       	ldd	r23, Y+12	; 0x0c
    160e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1610:	9e 85       	ldd	r25, Y+14	; 0x0e
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <createPassword+0x106>
    1634:	89 e1       	ldi	r24, 0x19	; 25
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <createPassword+0xf4>
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <createPassword+0xe8>
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <createPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <createPassword+0x130>
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	UART_sendString(re_password);
    1684:	89 89       	ldd	r24, Y+17	; 0x11
    1686:	9a 89       	ldd	r25, Y+18	; 0x12
    1688:	0e 94 24 16 	call	0x2c48	; 0x2c48 <UART_sendString>

	/*receive the status of the check process*/
	g_checkFlag = UART_receiveByte();
    168c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_receiveByte>
    1690:	80 93 1f 01 	sts	0x011F, r24
}
    1694:	62 96       	adiw	r28, 0x12	; 18
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <openDoor>:
 * Input: an array of sting to store the logging password ,
 * and the location of a global variable which count the timer ticks
 * Output: void
 * */
void openDoor(unsigned char *a_logPassword,unsigned char *g_tick)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <openDoor+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <openDoor+0x8>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	7c 83       	std	Y+4, r23	; 0x04
    16b8:	6b 83       	std	Y+3, r22	; 0x03
	/*variable to count the number of error trying*/
	static uint8 errorCount=0;
	LCD_clearScreen();
    16ba:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>

	/*Enter Password:*/
	LCD_displayString("Plz Enter Pass:");
    16be:	8f e7       	ldi	r24, 0x7F	; 127
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
	enterPassword(a_logPassword);
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	0e 94 82 09 	call	0x1304	; 0x1304 <enterPassword>

	/*Send Password to check if it is true:*/
	UART_sendString(a_logPassword);
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	0e 94 24 16 	call	0x2c48	; 0x2c48 <UART_sendString>

	/*receive the status of the check process*/
	g_checkFlag= UART_receiveByte();
    16d6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_receiveByte>
    16da:	80 93 1f 01 	sts	0x011F, r24

	/*Decide what to do according to the check errorCount:*/
	/*If the password is true, display the door opening status*/
	if(g_checkFlag == SUCCESS)
    16de:	80 91 1f 01 	lds	r24, 0x011F
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	51 f5       	brne	.+84     	; 0x173a <openDoor+0x94>
	{
		errorCount =0;
    16e6:	10 92 1a 01 	sts	0x011A, r1
		UART_sendByte(OPEN_DOOR);
    16ea:	85 e4       	ldi	r24, 0x45	; 69
    16ec:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <UART_sendByte>

		LCD_clearScreen();
    16f0:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
		LCD_displayString("Door is Unlocking");
    16f4:	8f e8       	ldi	r24, 0x8F	; 143
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
		*g_tick = 0;
    16fc:	eb 81       	ldd	r30, Y+3	; 0x03
    16fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1700:	10 82       	st	Z, r1
		while(*g_tick <= 15){};
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	80 81       	ld	r24, Z
    1708:	80 31       	cpi	r24, 0x10	; 16
    170a:	d8 f3       	brcs	.-10     	; 0x1702 <openDoor+0x5c>

		/*hold the door for 3 seconds*/
		LCD_clearScreen();
    170c:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
		LCD_displayString("Door is Open");
    1710:	81 ea       	ldi	r24, 0xA1	; 161
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
		while(*g_tick <= 18){};
    1718:	eb 81       	ldd	r30, Y+3	; 0x03
    171a:	fc 81       	ldd	r31, Y+4	; 0x04
    171c:	80 81       	ld	r24, Z
    171e:	83 31       	cpi	r24, 0x13	; 19
    1720:	d8 f3       	brcs	.-10     	; 0x1718 <openDoor+0x72>

		LCD_clearScreen();
    1722:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
		LCD_displayString("Door is Locking");
    1726:	8e ea       	ldi	r24, 0xAE	; 174
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
		while(*g_tick <= 33){};
    172e:	eb 81       	ldd	r30, Y+3	; 0x03
    1730:	fc 81       	ldd	r31, Y+4	; 0x04
    1732:	80 81       	ld	r24, Z
    1734:	82 32       	cpi	r24, 0x22	; 34
    1736:	d8 f3       	brcs	.-10     	; 0x172e <openDoor+0x88>
    1738:	30 c0       	rjmp	.+96     	; 0x179a <openDoor+0xf4>
	}
	/*If the password is false, increment the error count
	 *and check if it's the third time error or still within range to try again*/
	else
	{
		errorCount++;
    173a:	80 91 1a 01 	lds	r24, 0x011A
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	80 93 1a 01 	sts	0x011A, r24
		/*if we still within the range of errors try again*/
		if(errorCount <3)
    1744:	80 91 1a 01 	lds	r24, 0x011A
    1748:	83 30       	cpi	r24, 0x03	; 3
    174a:	b0 f4       	brcc	.+44     	; 0x1778 <openDoor+0xd2>
		{
			LCD_clearScreen();
    174c:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
			LCD_displayString("Try again");
    1750:	8e eb       	ldi	r24, 0xBE	; 190
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
			*g_tick=0;
    1758:	eb 81       	ldd	r30, Y+3	; 0x03
    175a:	fc 81       	ldd	r31, Y+4	; 0x04
    175c:	10 82       	st	Z, r1
			while(*g_tick <= 1){};
    175e:	eb 81       	ldd	r30, Y+3	; 0x03
    1760:	fc 81       	ldd	r31, Y+4	; 0x04
    1762:	80 81       	ld	r24, Z
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	d8 f3       	brcs	.-10     	; 0x175e <openDoor+0xb8>
			openDoor(a_logPassword,g_tick);
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	2b 81       	ldd	r18, Y+3	; 0x03
    176e:	3c 81       	ldd	r19, Y+4	; 0x04
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <openDoor>
    1776:	11 c0       	rjmp	.+34     	; 0x179a <openDoor+0xf4>
		}
		/*if we are not within the range of errors active the buzzer
		 * and stop the device then restart*/
		else {
			LCD_clearScreen();
    1778:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
			LCD_displayString("ERROR");
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
			UART_sendByte(BUZZER);
    1784:	86 e7       	ldi	r24, 0x76	; 118
    1786:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <UART_sendByte>
			*g_tick=0;
    178a:	eb 81       	ldd	r30, Y+3	; 0x03
    178c:	fc 81       	ldd	r31, Y+4	; 0x04
    178e:	10 82       	st	Z, r1
			while(*g_tick <= 1){};
    1790:	eb 81       	ldd	r30, Y+3	; 0x03
    1792:	fc 81       	ldd	r31, Y+4	; 0x04
    1794:	80 81       	ld	r24, Z
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	d8 f3       	brcs	.-10     	; 0x1790 <openDoor+0xea>
		}

	}
	errorCount =0;
    179a:	10 92 1a 01 	sts	0x011A, r1
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <changePassword>:
 * an array of sting to store the New password,
 * and an array of sting to store the re-enter password
 * Output: void
 * */
void changePassword(unsigned char *a_logPassword,unsigned char *password,unsigned char *re_password,unsigned char *g_tick)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	28 97       	sbiw	r28, 0x08	; 8
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	7c 83       	std	Y+4, r23	; 0x04
    17c6:	6b 83       	std	Y+3, r22	; 0x03
    17c8:	5e 83       	std	Y+6, r21	; 0x06
    17ca:	4d 83       	std	Y+5, r20	; 0x05
    17cc:	38 87       	std	Y+8, r19	; 0x08
    17ce:	2f 83       	std	Y+7, r18	; 0x07
	/*variable to count the number of error trying*/
	static uint8 errorCount=0;
	LCD_clearScreen();
    17d0:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>

	/*Enter Password:*/
	LCD_displayString("Plz Enter Pass:");
    17d4:	8f e7       	ldi	r24, 0x7F	; 127
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
	enterPassword(a_logPassword);
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	0e 94 82 09 	call	0x1304	; 0x1304 <enterPassword>

	/*Send Password to check if it is true:*/
	UART_sendString(a_logPassword);
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <UART_sendString>

	/*receive the status of the check process*/
	g_checkFlag= UART_receiveByte();
    17ec:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_receiveByte>
    17f0:	80 93 1f 01 	sts	0x011F, r24

	UART_sendByte(CHANGE_PASSWORD);
    17f4:	86 e5       	ldi	r24, 0x56	; 86
    17f6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <UART_sendByte>

	/*Decide what to do according to the check errorCount:*/
	/*If the password is true, start taking a new password */
	if(g_checkFlag == SUCCESS)
    17fa:	80 91 1f 01 	lds	r24, 0x011F
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	51 f4       	brne	.+20     	; 0x1816 <changePassword+0x6a>
	{
		errorCount=0;
    1802:	10 92 1b 01 	sts	0x011B, r1
		createPassword(password,re_password);
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	2d 81       	ldd	r18, Y+5	; 0x05
    180c:	3e 81       	ldd	r19, Y+6	; 0x06
    180e:	b9 01       	movw	r22, r18
    1810:	0e 94 a6 0a 	call	0x154c	; 0x154c <createPassword>
    1814:	35 c0       	rjmp	.+106    	; 0x1880 <changePassword+0xd4>
	}
	/*If the password is false, increment the error count
	 *and check if it's the third time error or still within range to try again*/
	else
	{
		errorCount++;
    1816:	80 91 1b 01 	lds	r24, 0x011B
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	80 93 1b 01 	sts	0x011B, r24
		if(errorCount <3)
    1820:	80 91 1b 01 	lds	r24, 0x011B
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	d8 f4       	brcc	.+54     	; 0x185e <changePassword+0xb2>
		{
			LCD_clearScreen();
    1828:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
			LCD_displayString("Try again");
    182c:	8e eb       	ldi	r24, 0xBE	; 190
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
			*g_tick=0;
    1834:	ef 81       	ldd	r30, Y+7	; 0x07
    1836:	f8 85       	ldd	r31, Y+8	; 0x08
    1838:	10 82       	st	Z, r1
			while(*g_tick <= 1){};
    183a:	ef 81       	ldd	r30, Y+7	; 0x07
    183c:	f8 85       	ldd	r31, Y+8	; 0x08
    183e:	80 81       	ld	r24, Z
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	d8 f3       	brcs	.-10     	; 0x183a <changePassword+0x8e>
			changePassword(a_logPassword, password, re_password,g_tick);
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	4d 81       	ldd	r20, Y+5	; 0x05
    184e:	5e 81       	ldd	r21, Y+6	; 0x06
    1850:	ef 81       	ldd	r30, Y+7	; 0x07
    1852:	f8 85       	ldd	r31, Y+8	; 0x08
    1854:	b9 01       	movw	r22, r18
    1856:	9f 01       	movw	r18, r30
    1858:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <changePassword>
    185c:	11 c0       	rjmp	.+34     	; 0x1880 <changePassword+0xd4>
		}
		else {
			LCD_clearScreen();
    185e:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
			LCD_displayString("ERROR");
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
			UART_sendByte(BUZZER);
    186a:	86 e7       	ldi	r24, 0x76	; 118
    186c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <UART_sendByte>
			*g_tick=0;
    1870:	ef 81       	ldd	r30, Y+7	; 0x07
    1872:	f8 85       	ldd	r31, Y+8	; 0x08
    1874:	10 82       	st	Z, r1
			while(*g_tick <= 1){};
    1876:	ef 81       	ldd	r30, Y+7	; 0x07
    1878:	f8 85       	ldd	r31, Y+8	; 0x08
    187a:	80 81       	ld	r24, Z
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	d8 f3       	brcs	.-10     	; 0x1876 <changePassword+0xca>
		}

	}
	errorCount =0;
    1880:	10 92 1b 01 	sts	0x011B, r1
}
    1884:	28 96       	adiw	r28, 0x08	; 8
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <TIMER1_ticks>:
/*global variable to store the number of ticks of the timer */
unsigned char g_tick=0;

/*function to be done when ISR is called*/
void TIMER1_ticks()
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    189e:	80 91 1c 01 	lds	r24, 0x011C
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	80 93 1c 01 	sts	0x011C, r24
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <main>:

int main(void)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	a9 97       	sbiw	r28, 0x29	; 41
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
	/*Definitions:*/
	unsigned char password[5],re_password[5],logPassword[5];
	UART_ConfigType uartConfig = {bit_8,Disabled,bit_1,9600};
    18c2:	9e 01       	movw	r18, r28
    18c4:	2f 5e       	subi	r18, 0xEF	; 239
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	39 a3       	std	Y+33, r19	; 0x21
    18ca:	28 a3       	std	Y+32, r18	; 0x20
    18cc:	83 e1       	ldi	r24, 0x13	; 19
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	9b a3       	std	Y+35, r25	; 0x23
    18d2:	8a a3       	std	Y+34, r24	; 0x22
    18d4:	97 e0       	ldi	r25, 0x07	; 7
    18d6:	9c a3       	std	Y+36, r25	; 0x24
    18d8:	ea a1       	ldd	r30, Y+34	; 0x22
    18da:	fb a1       	ldd	r31, Y+35	; 0x23
    18dc:	00 80       	ld	r0, Z
    18de:	2a a1       	ldd	r18, Y+34	; 0x22
    18e0:	3b a1       	ldd	r19, Y+35	; 0x23
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	3b a3       	std	Y+35, r19	; 0x23
    18e8:	2a a3       	std	Y+34, r18	; 0x22
    18ea:	e8 a1       	ldd	r30, Y+32	; 0x20
    18ec:	f9 a1       	ldd	r31, Y+33	; 0x21
    18ee:	00 82       	st	Z, r0
    18f0:	28 a1       	ldd	r18, Y+32	; 0x20
    18f2:	39 a1       	ldd	r19, Y+33	; 0x21
    18f4:	2f 5f       	subi	r18, 0xFF	; 255
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	39 a3       	std	Y+33, r19	; 0x21
    18fa:	28 a3       	std	Y+32, r18	; 0x20
    18fc:	3c a1       	ldd	r19, Y+36	; 0x24
    18fe:	31 50       	subi	r19, 0x01	; 1
    1900:	3c a3       	std	Y+36, r19	; 0x24
    1902:	8c a1       	ldd	r24, Y+36	; 0x24
    1904:	88 23       	and	r24, r24
    1906:	41 f7       	brne	.-48     	; 0x18d8 <main+0x2a>
	Timer1_ConfigType timerconfig ={0,999,CLK_1024,CTC};
    1908:	fe 01       	movw	r30, r28
    190a:	78 96       	adiw	r30, 0x18	; 24
    190c:	fe a3       	std	Y+38, r31	; 0x26
    190e:	ed a3       	std	Y+37, r30	; 0x25
    1910:	2d e0       	ldi	r18, 0x0D	; 13
    1912:	31 e0       	ldi	r19, 0x01	; 1
    1914:	38 a7       	std	Y+40, r19	; 0x28
    1916:	2f a3       	std	Y+39, r18	; 0x27
    1918:	36 e0       	ldi	r19, 0x06	; 6
    191a:	39 a7       	std	Y+41, r19	; 0x29
    191c:	ef a1       	ldd	r30, Y+39	; 0x27
    191e:	f8 a5       	ldd	r31, Y+40	; 0x28
    1920:	00 80       	ld	r0, Z
    1922:	2f a1       	ldd	r18, Y+39	; 0x27
    1924:	38 a5       	ldd	r19, Y+40	; 0x28
    1926:	2f 5f       	subi	r18, 0xFF	; 255
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	38 a7       	std	Y+40, r19	; 0x28
    192c:	2f a3       	std	Y+39, r18	; 0x27
    192e:	ed a1       	ldd	r30, Y+37	; 0x25
    1930:	fe a1       	ldd	r31, Y+38	; 0x26
    1932:	00 82       	st	Z, r0
    1934:	2d a1       	ldd	r18, Y+37	; 0x25
    1936:	3e a1       	ldd	r19, Y+38	; 0x26
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	3e a3       	std	Y+38, r19	; 0x26
    193e:	2d a3       	std	Y+37, r18	; 0x25
    1940:	39 a5       	ldd	r19, Y+41	; 0x29
    1942:	31 50       	subi	r19, 0x01	; 1
    1944:	39 a7       	std	Y+41, r19	; 0x29
    1946:	89 a5       	ldd	r24, Y+41	; 0x29
    1948:	88 23       	and	r24, r24
    194a:	41 f7       	brne	.-48     	; 0x191c <main+0x6e>

	/*initialize the LCD , UART and Timer1:*/
	LCD_init();
    194c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_init>
	UART_init(&uartConfig);
    1950:	ce 01       	movw	r24, r28
    1952:	41 96       	adiw	r24, 0x11	; 17
    1954:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <UART_init>
	Timer1_init(&timerconfig);
    1958:	ce 01       	movw	r24, r28
    195a:	48 96       	adiw	r24, 0x18	; 24
    195c:	0e 94 bb 14 	call	0x2976	; 0x2976 <Timer1_init>
	Timer1_setCallBack(TIMER1_ticks);
    1960:	8b e4       	ldi	r24, 0x4B	; 75
    1962:	9c e0       	ldi	r25, 0x0C	; 12
    1964:	0e 94 43 15 	call	0x2a86	; 0x2a86 <Timer1_setCallBack>

	/*Create Password:*/
	createPassword(password,re_password);
    1968:	ce 01       	movw	r24, r28
    196a:	02 96       	adiw	r24, 0x02	; 2
    196c:	9e 01       	movw	r18, r28
    196e:	29 5f       	subi	r18, 0xF9	; 249
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	b9 01       	movw	r22, r18
    1974:	0e 94 a6 0a 	call	0x154c	; 0x154c <createPassword>
    1978:	1e c0       	rjmp	.+60     	; 0x19b6 <main+0x108>

	//If the passwords unmatched create password again, if not continue to the main menu to open the door:
	while(g_checkFlag == ERROR)
	{
		LCD_clearScreen();
    197a:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Unmatched pass");
    197e:	2e ec       	ldi	r18, 0xCE	; 206
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	a9 01       	movw	r20, r18
    1988:	0e 94 0f 14 	call	0x281e	; 0x281e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 3, "Try again");
    198c:	2d ed       	ldi	r18, 0xDD	; 221
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	63 e0       	ldi	r22, 0x03	; 3
    1994:	a9 01       	movw	r20, r18
    1996:	0e 94 0f 14 	call	0x281e	; 0x281e <LCD_displayStringRowColumn>
		g_tick=0;
    199a:	10 92 1c 01 	sts	0x011C, r1
		while(g_tick <=2){};
    199e:	80 91 1c 01 	lds	r24, 0x011C
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	e0 f3       	brcs	.-8      	; 0x199e <main+0xf0>
		createPassword(password, re_password);
    19a6:	ce 01       	movw	r24, r28
    19a8:	02 96       	adiw	r24, 0x02	; 2
    19aa:	9e 01       	movw	r18, r28
    19ac:	29 5f       	subi	r18, 0xF9	; 249
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 a6 0a 	call	0x154c	; 0x154c <createPassword>

	/*Create Password:*/
	createPassword(password,re_password);

	//If the passwords unmatched create password again, if not continue to the main menu to open the door:
	while(g_checkFlag == ERROR)
    19b6:	80 91 1f 01 	lds	r24, 0x011F
    19ba:	88 23       	and	r24, r24
    19bc:	f1 f2       	breq	.-68     	; 0x197a <main+0xcc>
	}

	while(1)
	{
		unsigned char key;
		LCD_clearScreen();
    19be:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    19c2:	87 ee       	ldi	r24, 0xE7	; 231
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
		LCD_moveCursor(1, 0);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    19d2:	85 ef       	ldi	r24, 0xF5	; 245
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>

		key=KEYPAD_getPressedKey();
    19da:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <KEYPAD_getPressedKey>
    19de:	89 83       	std	Y+1, r24	; 0x01
		LCD_clearScreen();
    19e0:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_clearScreen>
		switch(key){
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	e8 2f       	mov	r30, r24
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	ff 8f       	std	Y+31, r31	; 0x1f
    19ec:	ee 8f       	std	Y+30, r30	; 0x1e
    19ee:	2e 8d       	ldd	r18, Y+30	; 0x1e
    19f0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    19f2:	2b 32       	cpi	r18, 0x2B	; 43
    19f4:	31 05       	cpc	r19, r1
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <main+0x156>
    19f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19fc:	8d 32       	cpi	r24, 0x2D	; 45
    19fe:	91 05       	cpc	r25, r1
    1a00:	49 f0       	breq	.+18     	; 0x1a14 <main+0x166>
    1a02:	dd cf       	rjmp	.-70     	; 0x19be <main+0x110>
		case '+':
			openDoor(logPassword,&g_tick);
    1a04:	ce 01       	movw	r24, r28
    1a06:	0c 96       	adiw	r24, 0x0c	; 12
    1a08:	2c e1       	ldi	r18, 0x1C	; 28
    1a0a:	31 e0       	ldi	r19, 0x01	; 1
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <openDoor>
    1a12:	d5 cf       	rjmp	.-86     	; 0x19be <main+0x110>
			break;
		case '-':
			changePassword(logPassword,password,re_password,&g_tick);
    1a14:	ce 01       	movw	r24, r28
    1a16:	0c 96       	adiw	r24, 0x0c	; 12
    1a18:	9e 01       	movw	r18, r28
    1a1a:	2e 5f       	subi	r18, 0xFE	; 254
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	ae 01       	movw	r20, r28
    1a20:	49 5f       	subi	r20, 0xF9	; 249
    1a22:	5f 4f       	sbci	r21, 0xFF	; 255
    1a24:	ec e1       	ldi	r30, 0x1C	; 28
    1a26:	f1 e0       	ldi	r31, 0x01	; 1
    1a28:	b9 01       	movw	r22, r18
    1a2a:	9f 01       	movw	r18, r30
    1a2c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <changePassword>
    1a30:	c6 cf       	rjmp	.-116    	; 0x19be <main+0x110>

00001a32 <TWI_init>:
/* Description: setup and enable the TWI
 * Input: void
 * Output: void
 * */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <TWI_init+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	/*Bit rate : speed of 400kbps , Prescalar TWPS=00, Frequency= 8 MHZ */
	TWBR = Config_Ptr->bit_rate;
    1a40:	a0 e2       	ldi	r26, 0x20	; 32
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e9 81       	ldd	r30, Y+1	; 0x01
    1a46:	fa 81       	ldd	r31, Y+2	; 0x02
    1a48:	81 81       	ldd	r24, Z+1	; 0x01
    1a4a:	8c 93       	st	X, r24

	/*Prescalar:*/
	TWSR =0x00;
    1a4c:	e1 e2       	ldi	r30, 0x21	; 33
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	10 82       	st	Z, r1

	/*TWCR:
	 * Bit-2 TWEN:	Set for enable the TWI
	 * */
	TWCR =  (1<<TWEN);
    1a52:	e6 e5       	ldi	r30, 0x56	; 86
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	80 83       	st	Z, r24

	/*Assign my address is 0x0F*/
	TWAR = Config_Ptr->address;
    1a5a:	a2 e2       	ldi	r26, 0x22	; 34
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a60:	fa 81       	ldd	r31, Y+2	; 0x02
    1a62:	80 81       	ld	r24, Z
    1a64:	8c 93       	st	X, r24
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <TWI_start>:
/* Description: Start the communication by sending start bit
 * Input:  void
 * Output: void
 * */
void TWI_start(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	/*TWCR:
	 * Bit-7 TWINT: Set by 1 to clear the flag but after setup all other registers to start the TWI operation
	 * Bit-5 TWSTA: Set to become a master by sending the start condition
	 * Bit-2 TWEN:	Set for enable the TWI
	 * */
	TWCR = (1<<TWINT) | (1<< TWSTA) | (1 << TWEN);
    1a78:	e6 e5       	ldi	r30, 0x56	; 86
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	84 ea       	ldi	r24, 0xA4	; 164
    1a7e:	80 83       	st	Z, r24

	/*Wait until the Start bit is sent and the TWINT flag is set*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1a80:	e6 e5       	ldi	r30, 0x56	; 86
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 23       	and	r24, r24
    1a88:	dc f7       	brge	.-10     	; 0x1a80 <TWI_start+0x10>
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <TWI_stop>:
/* Description: Stop the communication by sending the stop condition
 * Input: void
 * Output: void
 * */
void TWI_stop(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	/*TWCR:
	 * Bit-7 TWINT: Set by 1 to clear the flag but after setup all other registers to start the TWI operation
	 * Bit-4 TWSTO: Set to become a master
	 * Bit-2 TWEN:	Set for enable the TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1a98:	e6 e5       	ldi	r30, 0x56	; 86
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	84 e9       	ldi	r24, 0x94	; 148
    1a9e:	80 83       	st	Z, r24
}
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <TWI_writeByte>:
/* Description: Write a byte
 * Input: Data (uint8)
 * Output: void
 * */
void TWI_writeByte(uint8 data)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	0f 92       	push	r0
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	/*store the data in the data register*/
	TWDR =data;
    1ab2:	e3 e2       	ldi	r30, 0x23	; 35
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	80 83       	st	Z, r24

	/*TWCR:
	 * Bit-7 TWINT: Set by 1 to clear the flag but after setup all other registers to start the TWI operation
	 * Bit-2 TWEN:	Set for enable the TWI
	 * */
	TWCR = (1<<TWINT)| (1<<TWEN);
    1aba:	e6 e5       	ldi	r30, 0x56	; 86
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	84 e8       	ldi	r24, 0x84	; 132
    1ac0:	80 83       	st	Z, r24

	/*Wait until the Start bit is sent and the TWINT flag is set*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1ac2:	e6 e5       	ldi	r30, 0x56	; 86
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	88 23       	and	r24, r24
    1aca:	dc f7       	brge	.-10     	; 0x1ac2 <TWI_writeByte+0x1c>

}
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <TWI_readByteWithACK>:
/* Description: read Byte and send ACK bit
 * Input: void
 * Output: data (uint8)
 * */
uint8 TWI_readByteWithACK()
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	/*TWCR:
	 * Bit-7 TWINT: Set by 1 to clear the flag but after setup all other registers to start the TWI operation
	 * Bit-6 TWEA: Set to enable ACK bit
	 * Bit-2 TWEN:	Set for enable the TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1adc:	e6 e5       	ldi	r30, 0x56	; 86
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	84 ec       	ldi	r24, 0xC4	; 196
    1ae2:	80 83       	st	Z, r24

	/*Wait until the Start bit is sent and the TWINT flag is set*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1ae4:	e6 e5       	ldi	r30, 0x56	; 86
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	dc f7       	brge	.-10     	; 0x1ae4 <TWI_readByteWithACK+0x10>

	/* Read Data */
	 return TWDR;
    1aee:	e3 e2       	ldi	r30, 0x23	; 35
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
}
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <TWI_readByteWithNACK>:
/* Description: read Byte and don't send ACK bit
 * Input: void
 * Output: data (uint8)
 * */
uint8 TWI_readByteWithNACK()
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
	/*TWCR:
	 * Bit-7 TWINT: Set by 1 to clear the flag but after setup all other registers to start the TWI operation
	 * Bit-6 TWEA: Clear to disable ACK bit
	 * Bit-2 TWEN:	Set for enable the TWI
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b02:	e6 e5       	ldi	r30, 0x56	; 86
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	84 e8       	ldi	r24, 0x84	; 132
    1b08:	80 83       	st	Z, r24

	/*Wait until the Start bit is sent and the TWINT flag is set*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b0a:	e6 e5       	ldi	r30, 0x56	; 86
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	dc f7       	brge	.-10     	; 0x1b0a <TWI_readByteWithNACK+0x10>

	/* Read Data */
	 return TWDR;
    1b14:	e3 e2       	ldi	r30, 0x23	; 35
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <TWI_getStatus>:
/* Description: Get the status of the TWI
 * Input: void
 * Output: status (uint8)
 * */
uint8 TWI_getStatus(void)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    uint8 status;

    /*extract the 5 bits from 7 to 3 only and eliminate the first 3 bits*/
    status = TWSR & 0xF8;
    1b2a:	e1 e2       	ldi	r30, 0x21	; 33
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 7f       	andi	r24, 0xF8	; 248
    1b32:	89 83       	std	Y+1, r24	; 0x01

    return status;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <KEYPAD_getPressedKey>:
		static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
	#endif
#endif

uint8 KEYPAD_getPressedKey(void)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	60 97       	sbiw	r28, 0x10	; 16
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	/*FIRST STEP:
	 * SET DIRECTIONS OF ALL PINS INPUTS AS NORMAL
	 * */

	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, Pin_INPUT);
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, Pin_INPUT);
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, Pin_INPUT);
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, Pin_INPUT);
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	63 e0       	ldi	r22, 0x03	; 3
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, Pin_INPUT);
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	64 e0       	ldi	r22, 0x04	; 4
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, Pin_INPUT);
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	65 e0       	ldi	r22, 0x05	; 5
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, Pin_INPUT);
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	66 e0       	ldi	r22, 0x06	; 6
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
#if (KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, Pin_INPUT);
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    1ba2:	1f 86       	std	Y+15, r1	; 0x0f
    1ba4:	ab c0       	rjmp	.+342    	; 0x1cfc <KEYPAD_getPressedKey+0x1be>
		{
			/*SECOND STEP:
			 * SET JUST ONE ROW EACH TIME AS OUTPUT
			 * */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, Pin_OUTPUT);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
			/*THIRD STEP:
			 * WRITE THE ROW TO BE PRESSED
			 * */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    1bba:	18 8a       	std	Y+16, r1	; 0x10
    1bbc:	22 c0       	rjmp	.+68     	; 0x1c02 <KEYPAD_getPressedKey+0xc4>
			{
				/*FOURTH STEP:
				 * CHECK THE PRESSED BUTTON AT WHICH COL
				 * */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1bbe:	88 89       	ldd	r24, Y+16	; 0x10
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	9c 5f       	subi	r25, 0xFC	; 252
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	69 2f       	mov	r22, r25
    1bc8:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_readPin>
    1bcc:	88 23       	and	r24, r24
    1bce:	b1 f4       	brne	.+44     	; 0x1bfc <KEYPAD_getPressedKey+0xbe>
					#ifndef STANDARD_KEYPAD
						#if  (KEYPAD_NUM_COLS==3)
							return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);

						#elif (KEYPAD_NUM_COLS==4)
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	98 2f       	mov	r25, r24
    1be0:	88 89       	ldd	r24, Y+16	; 0x10
    1be2:	89 0f       	add	r24, r25
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,Pin_INPUT);
			_delay_ms(5);
		}
	}

}
    1bea:	60 96       	adiw	r28, 0x10	; 16
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, Pin_OUTPUT);
			/*THIRD STEP:
			 * WRITE THE ROW TO BE PRESSED
			 * */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    1bfc:	88 89       	ldd	r24, Y+16	; 0x10
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	88 8b       	std	Y+16, r24	; 0x10
    1c02:	88 89       	ldd	r24, Y+16	; 0x10
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	d8 f2       	brcs	.-74     	; 0x1bbe <KEYPAD_getPressedKey+0x80>
					#else
							return(row*KEYPAD_NUM_COLS)+col+1;
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,Pin_INPUT);
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 ea       	ldi	r26, 0xA0	; 160
    1c18:	b0 e4       	ldi	r27, 0x40	; 64
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	53 e4       	ldi	r21, 0x43	; 67
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <KEYPAD_getPressedKey+0x186>
    1ca6:	89 e1       	ldi	r24, 0x19	; 25
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <KEYPAD_getPressedKey+0x174>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <KEYPAD_getPressedKey+0x168>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <KEYPAD_getPressedKey+0x1b0>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, Pin_INPUT);
#endif

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    1cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	08 f4       	brcc	.+2      	; 0x1d04 <KEYPAD_getPressedKey+0x1c6>
    1d02:	51 cf       	rjmp	.-350    	; 0x1ba6 <KEYPAD_getPressedKey+0x68>
    1d04:	4e cf       	rjmp	.-356    	; 0x1ba2 <KEYPAD_getPressedKey+0x64>

00001d06 <KEYPAD_4x4_adjustKeyNumber>:
	return keypad_button;
}

#elif (KEYPAD_NUM_COLS==4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	8a 83       	std	Y+2, r24	; 0x02
	char keypad_button = 0;
    1d14:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3c 83       	std	Y+4, r19	; 0x04
    1d1e:	2b 83       	std	Y+3, r18	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	91 05       	cpc	r25, r1
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d2a:	70 c0       	rjmp	.+224    	; 0x1e0c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d30:	29 30       	cpi	r18, 0x09	; 9
    1d32:	31 05       	cpc	r19, r1
    1d34:	5c f5       	brge	.+86     	; 0x1d8c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	84 30       	cpi	r24, 0x04	; 4
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d40:	59 c0       	rjmp	.+178    	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d42:	2b 81       	ldd	r18, Y+3	; 0x03
    1d44:	3c 81       	ldd	r19, Y+4	; 0x04
    1d46:	25 30       	cpi	r18, 0x05	; 5
    1d48:	31 05       	cpc	r19, r1
    1d4a:	9c f4       	brge	.+38     	; 0x1d72 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	91 05       	cpc	r25, r1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d56:	48 c0       	rjmp	.+144    	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	23 30       	cpi	r18, 0x03	; 3
    1d5e:	31 05       	cpc	r19, r1
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d62:	45 c0       	rjmp	.+138    	; 0x1dee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d6e:	39 c0       	rjmp	.+114    	; 0x1de2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d70:	67 c0       	rjmp	.+206    	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d72:	2b 81       	ldd	r18, Y+3	; 0x03
    1d74:	3c 81       	ldd	r19, Y+4	; 0x04
    1d76:	26 30       	cpi	r18, 0x06	; 6
    1d78:	31 05       	cpc	r19, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d7c:	41 c0       	rjmp	.+130    	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	87 30       	cpi	r24, 0x07	; 7
    1d84:	91 05       	cpc	r25, r1
    1d86:	0c f0       	brlt	.+2      	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d88:	3e c0       	rjmp	.+124    	; 0x1e06 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d8a:	37 c0       	rjmp	.+110    	; 0x1dfa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d90:	2c 30       	cpi	r18, 0x0C	; 12
    1d92:	31 05       	cpc	r19, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d96:	46 c0       	rjmp	.+140    	; 0x1e24 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	8d 30       	cpi	r24, 0x0D	; 13
    1d9e:	91 05       	cpc	r25, r1
    1da0:	5c f4       	brge	.+22     	; 0x1db8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	2a 30       	cpi	r18, 0x0A	; 10
    1da8:	31 05       	cpc	r19, r1
    1daa:	b1 f1       	breq	.+108    	; 0x1e18 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	8b 30       	cpi	r24, 0x0B	; 11
    1db2:	91 05       	cpc	r25, r1
    1db4:	a4 f5       	brge	.+104    	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1db6:	2d c0       	rjmp	.+90     	; 0x1e12 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	2e 30       	cpi	r18, 0x0E	; 14
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	b9 f1       	breq	.+110    	; 0x1e30 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	8e 30       	cpi	r24, 0x0E	; 14
    1dc8:	91 05       	cpc	r25, r1
    1dca:	7c f1       	brlt	.+94     	; 0x1e2a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dce:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd0:	2f 30       	cpi	r18, 0x0F	; 15
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	79 f1       	breq	.+94     	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	80 31       	cpi	r24, 0x10	; 16
    1ddc:	91 05       	cpc	r25, r1
    1dde:	69 f1       	breq	.+90     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1de0:	2f c0       	rjmp	.+94     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    1de2:	87 e0       	ldi	r24, 0x07	; 7
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	2e c0       	rjmp	.+92     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    1de8:	88 e0       	ldi	r24, 0x08	; 8
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	2b c0       	rjmp	.+86     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    1dee:	89 e0       	ldi	r24, 0x09	; 9
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	28 c0       	rjmp	.+80     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '/';
    1df4:	8f e2       	ldi	r24, 0x2F	; 47
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	25 c0       	rjmp	.+74     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	22 c0       	rjmp	.+68     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	1f c0       	rjmp	.+62     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    1e06:	86 e0       	ldi	r24, 0x06	; 6
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	1c c0       	rjmp	.+56     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*'; /* ASCII Code of '*' */
    1e0c:	8a e2       	ldi	r24, 0x2A	; 42
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	19 c0       	rjmp	.+50     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	16 c0       	rjmp	.+44     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	13 c0       	rjmp	.+38     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	10 c0       	rjmp	.+32     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-'; /* ASCII Code of '-' */
    1e24:	8d e2       	ldi	r24, 0x2D	; 45
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;  /* ASCII of Enter */
    1e2a:	8d e0       	ldi	r24, 0x0D	; 13
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	0a c0       	rjmp	.+20     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	08 c0       	rjmp	.+16     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '='; /* ASCII Code of '=' */
    1e34:	8d e3       	ldi	r24, 0x3D	; 61
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+'; /* ASCII Code of '+' */
    1e3a:	8b e2       	ldi	r24, 0x2B	; 43
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <LCD_init>:
/* Description: Initialize the LCD
 * Input: void
 * Output: void
 * */
void LCD_init(void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
	/*directions*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,Pin_OUTPUT);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,Pin_OUTPUT);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_setupPinDirection>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 ea       	ldi	r26, 0xA0	; 160
    1e82:	b1 e4       	ldi	r27, 0x41	; 65
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a e7       	ldi	r20, 0x7A	; 122
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <LCD_init+0x7a>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <LCD_init+0xda>
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_init+0xc8>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <LCD_init+0xbc>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_init+0x104>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01

	/*wait:*/
	_delay_ms(20);
#if (LCD_DATA_BITS_MODE==8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	6f ef       	ldi	r22, 0xFF	; 255
    1f64:	0e 94 b5 08 	call	0x116a	; 0x116a <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f68:	88 e3       	ldi	r24, 0x38	; 56
    1f6a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1f6e:	8c e0       	ldi	r24, 0x0C	; 12
    1f70:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_sendCommand>

	/*clear:*/
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_sendCommand>
}
    1f7a:	2e 96       	adiw	r28, 0x0e	; 14
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <LCD_sendCommand>:
/* Description: send command to LCD for specific purpose according to the available commands
 * Input: the command code (uint8)
 * Output: void
 * */
void LCD_sendCommand(uint8 command)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	e9 97       	sbiw	r28, 0x39	; 57
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8d ab       	std	Y+53, r24	; 0x35
    1fb6:	9e ab       	std	Y+54, r25	; 0x36
    1fb8:	af ab       	std	Y+55, r26	; 0x37
    1fba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a e7       	ldi	r20, 0x7A	; 122
    1fca:	53 e4       	ldi	r21, 0x43	; 67
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 ab       	std	Y+49, r24	; 0x31
    1fd6:	9a ab       	std	Y+50, r25	; 0x32
    1fd8:	ab ab       	std	Y+51, r26	; 0x33
    1fda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fde:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_sendCommand+0x72>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	98 ab       	std	Y+48, r25	; 0x30
    1ffa:	8f a7       	std	Y+47, r24	; 0x2f
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6d a9       	ldd	r22, Y+53	; 0x35
    2018:	7e a9       	ldd	r23, Y+54	; 0x36
    201a:	8f a9       	ldd	r24, Y+55	; 0x37
    201c:	98 ad       	ldd	r25, Y+56	; 0x38
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_sendCommand+0xd2>
    2040:	89 e1       	ldi	r24, 0x19	; 25
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9e a7       	std	Y+46, r25	; 0x2e
    2046:	8d a7       	std	Y+45, r24	; 0x2d
    2048:	8d a5       	ldd	r24, Y+45	; 0x2d
    204a:	9e a5       	ldd	r25, Y+46	; 0x2e
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_sendCommand+0xc0>
    2050:	9e a7       	std	Y+46, r25	; 0x2e
    2052:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	98 a9       	ldd	r25, Y+48	; 0x30
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_sendCommand+0xb4>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	69 a9       	ldd	r22, Y+49	; 0x31
    206a:	7a a9       	ldd	r23, Y+50	; 0x32
    206c:	8b a9       	ldd	r24, Y+51	; 0x33
    206e:	9c a9       	ldd	r25, Y+52	; 0x34
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
    207c:	8f a5       	ldd	r24, Y+47	; 0x2f
    207e:	98 a9       	ldd	r25, Y+48	; 0x30
    2080:	9c a7       	std	Y+44, r25	; 0x2c
    2082:	8b a7       	std	Y+43, r24	; 0x2b
    2084:	8b a5       	ldd	r24, Y+43	; 0x2b
    2086:	9c a5       	ldd	r25, Y+44	; 0x2c
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_sendCommand+0xfc>
    208c:	9c a7       	std	Y+44, r25	; 0x2c
    208e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e8       	ldi	r26, 0x80	; 128
    20a0:	bf e3       	ldi	r27, 0x3F	; 63
    20a2:	8f a3       	std	Y+39, r24	; 0x27
    20a4:	98 a7       	std	Y+40, r25	; 0x28
    20a6:	a9 a7       	std	Y+41, r26	; 0x29
    20a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6f a1       	ldd	r22, Y+39	; 0x27
    20ac:	78 a5       	ldd	r23, Y+40	; 0x28
    20ae:	89 a5       	ldd	r24, Y+41	; 0x29
    20b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a e7       	ldi	r20, 0x7A	; 122
    20b8:	53 e4       	ldi	r21, 0x43	; 67
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8b a3       	std	Y+35, r24	; 0x23
    20c4:	9c a3       	std	Y+36, r25	; 0x24
    20c6:	ad a3       	std	Y+37, r26	; 0x25
    20c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <LCD_sendCommand+0x160>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9a a3       	std	Y+34, r25	; 0x22
    20e8:	89 a3       	std	Y+33, r24	; 0x21
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6f a1       	ldd	r22, Y+39	; 0x27
    2106:	78 a5       	ldd	r23, Y+40	; 0x28
    2108:	89 a5       	ldd	r24, Y+41	; 0x29
    210a:	9a a5       	ldd	r25, Y+42	; 0x2a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9a a3       	std	Y+34, r25	; 0x22
    212a:	89 a3       	std	Y+33, r24	; 0x21
    212c:	0f c0       	rjmp	.+30     	; 0x214c <LCD_sendCommand+0x1c0>
    212e:	89 e1       	ldi	r24, 0x19	; 25
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	98 a3       	std	Y+32, r25	; 0x20
    2134:	8f 8f       	std	Y+31, r24	; 0x1f
    2136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2138:	98 a1       	ldd	r25, Y+32	; 0x20
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_sendCommand+0x1ae>
    213e:	98 a3       	std	Y+32, r25	; 0x20
    2140:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	89 a1       	ldd	r24, Y+33	; 0x21
    2144:	9a a1       	ldd	r25, Y+34	; 0x22
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <LCD_sendCommand+0x1a2>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6b a1       	ldd	r22, Y+35	; 0x23
    2158:	7c a1       	ldd	r23, Y+36	; 0x24
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	9e a1       	ldd	r25, Y+38	; 0x26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	9e 8f       	std	Y+30, r25	; 0x1e
    2170:	8d 8f       	std	Y+29, r24	; 0x1d
    2172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2174:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0x1ea>
    217a:	9e 8f       	std	Y+30, r25	; 0x1e
    217c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE==8)

	GPIO_writePort(LCD_DATA_PORT_ID, command);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	69 ad       	ldd	r22, Y+57	; 0x39
    2182:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePort>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e8       	ldi	r26, 0x80	; 128
    218c:	bf e3       	ldi	r27, 0x3F	; 63
    218e:	89 8f       	std	Y+25, r24	; 0x19
    2190:	9a 8f       	std	Y+26, r25	; 0x1a
    2192:	ab 8f       	std	Y+27, r26	; 0x1b
    2194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	69 8d       	ldd	r22, Y+25	; 0x19
    2198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a e7       	ldi	r20, 0x7A	; 122
    21a4:	53 e4       	ldi	r21, 0x43	; 67
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8d 8b       	std	Y+21, r24	; 0x15
    21b0:	9e 8b       	std	Y+22, r25	; 0x16
    21b2:	af 8b       	std	Y+23, r26	; 0x17
    21b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    21d8:	6d 89       	ldd	r22, Y+21	; 0x15
    21da:	7e 89       	ldd	r23, Y+22	; 0x16
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	69 8d       	ldd	r22, Y+25	; 0x19
    21f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <LCD_sendCommand+0x2ac>
    221a:	89 e1       	ldi	r24, 0x19	; 25
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9a 8b       	std	Y+18, r25	; 0x12
    2220:	89 8b       	std	Y+17, r24	; 0x11
    2222:	89 89       	ldd	r24, Y+17	; 0x11
    2224:	9a 89       	ldd	r25, Y+18	; 0x12
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_sendCommand+0x29a>
    222a:	9a 8b       	std	Y+18, r25	; 0x12
    222c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <LCD_sendCommand+0x28e>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6d 89       	ldd	r22, Y+21	; 0x15
    2244:	7e 89       	ldd	r23, Y+22	; 0x16
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	98 8b       	std	Y+16, r25	; 0x10
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2260:	98 89       	ldd	r25, Y+16	; 0x10
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_sendCommand+0x2d6>
    2266:	98 8b       	std	Y+16, r25	; 0x10
    2268:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	62 e0       	ldi	r22, 0x02	; 2
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	8b 87       	std	Y+11, r24	; 0x0b
    227e:	9c 87       	std	Y+12, r25	; 0x0c
    2280:	ad 87       	std	Y+13, r26	; 0x0d
    2282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	6b 85       	ldd	r22, Y+11	; 0x0b
    2286:	7c 85       	ldd	r23, Y+12	; 0x0c
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	9e 85       	ldd	r25, Y+14	; 0x0e
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	98 87       	std	Y+8, r25	; 0x08
    22a0:	a9 87       	std	Y+9, r26	; 0x09
    22a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <LCD_sendCommand+0x39a>
    2308:	89 e1       	ldi	r24, 0x19	; 25
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_sendCommand+0x388>
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <LCD_sendCommand+0x37c>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_sendCommand+0x3c4>
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2358:	e9 96       	adiw	r28, 0x39	; 57
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <LCD_displayCharacter>:
/* Description: Display only a char on the LCD
 * Input: the char (uint8)
 * Output: void
 * */
void LCD_displayCharacter(uint8 data)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	e9 97       	sbiw	r28, 0x39	; 57
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e8       	ldi	r26, 0x80	; 128
    2390:	bf e3       	ldi	r27, 0x3F	; 63
    2392:	8d ab       	std	Y+53, r24	; 0x35
    2394:	9e ab       	std	Y+54, r25	; 0x36
    2396:	af ab       	std	Y+55, r26	; 0x37
    2398:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	6d a9       	ldd	r22, Y+53	; 0x35
    239c:	7e a9       	ldd	r23, Y+54	; 0x36
    239e:	8f a9       	ldd	r24, Y+55	; 0x37
    23a0:	98 ad       	ldd	r25, Y+56	; 0x38
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a e7       	ldi	r20, 0x7A	; 122
    23a8:	53 e4       	ldi	r21, 0x43	; 67
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	89 ab       	std	Y+49, r24	; 0x31
    23b4:	9a ab       	std	Y+50, r25	; 0x32
    23b6:	ab ab       	std	Y+51, r26	; 0x33
    23b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ba:	69 a9       	ldd	r22, Y+49	; 0x31
    23bc:	7a a9       	ldd	r23, Y+50	; 0x32
    23be:	8b a9       	ldd	r24, Y+51	; 0x33
    23c0:	9c a9       	ldd	r25, Y+52	; 0x34
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <LCD_displayCharacter+0x72>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	98 ab       	std	Y+48, r25	; 0x30
    23d8:	8f a7       	std	Y+47, r24	; 0x2f
    23da:	3f c0       	rjmp	.+126    	; 0x245a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23dc:	69 a9       	ldd	r22, Y+49	; 0x31
    23de:	7a a9       	ldd	r23, Y+50	; 0x32
    23e0:	8b a9       	ldd	r24, Y+51	; 0x33
    23e2:	9c a9       	ldd	r25, Y+52	; 0x34
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	4c f5       	brge	.+82     	; 0x2446 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	6d a9       	ldd	r22, Y+53	; 0x35
    23f6:	7e a9       	ldd	r23, Y+54	; 0x36
    23f8:	8f a9       	ldd	r24, Y+55	; 0x37
    23fa:	98 ad       	ldd	r25, Y+56	; 0x38
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	98 ab       	std	Y+48, r25	; 0x30
    241a:	8f a7       	std	Y+47, r24	; 0x2f
    241c:	0f c0       	rjmp	.+30     	; 0x243c <LCD_displayCharacter+0xd2>
    241e:	89 e1       	ldi	r24, 0x19	; 25
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9e a7       	std	Y+46, r25	; 0x2e
    2424:	8d a7       	std	Y+45, r24	; 0x2d
    2426:	8d a5       	ldd	r24, Y+45	; 0x2d
    2428:	9e a5       	ldd	r25, Y+46	; 0x2e
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_displayCharacter+0xc0>
    242e:	9e a7       	std	Y+46, r25	; 0x2e
    2430:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	8f a5       	ldd	r24, Y+47	; 0x2f
    2434:	98 a9       	ldd	r25, Y+48	; 0x30
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	98 ab       	std	Y+48, r25	; 0x30
    243a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <LCD_displayCharacter+0xb4>
    2444:	14 c0       	rjmp	.+40     	; 0x246e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	69 a9       	ldd	r22, Y+49	; 0x31
    2448:	7a a9       	ldd	r23, Y+50	; 0x32
    244a:	8b a9       	ldd	r24, Y+51	; 0x33
    244c:	9c a9       	ldd	r25, Y+52	; 0x34
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	98 ab       	std	Y+48, r25	; 0x30
    2458:	8f a7       	std	Y+47, r24	; 0x2f
    245a:	8f a5       	ldd	r24, Y+47	; 0x2f
    245c:	98 a9       	ldd	r25, Y+48	; 0x30
    245e:	9c a7       	std	Y+44, r25	; 0x2c
    2460:	8b a7       	std	Y+43, r24	; 0x2b
    2462:	8b a5       	ldd	r24, Y+43	; 0x2b
    2464:	9c a5       	ldd	r25, Y+44	; 0x2c
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <LCD_displayCharacter+0xfc>
    246a:	9c a7       	std	Y+44, r25	; 0x2c
    246c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e8       	ldi	r26, 0x80	; 128
    247e:	bf e3       	ldi	r27, 0x3F	; 63
    2480:	8f a3       	std	Y+39, r24	; 0x27
    2482:	98 a7       	std	Y+40, r25	; 0x28
    2484:	a9 a7       	std	Y+41, r26	; 0x29
    2486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6f a1       	ldd	r22, Y+39	; 0x27
    248a:	78 a5       	ldd	r23, Y+40	; 0x28
    248c:	89 a5       	ldd	r24, Y+41	; 0x29
    248e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a e7       	ldi	r20, 0x7A	; 122
    2496:	53 e4       	ldi	r21, 0x43	; 67
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8b a3       	std	Y+35, r24	; 0x23
    24a2:	9c a3       	std	Y+36, r25	; 0x24
    24a4:	ad a3       	std	Y+37, r26	; 0x25
    24a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a8:	6b a1       	ldd	r22, Y+35	; 0x23
    24aa:	7c a1       	ldd	r23, Y+36	; 0x24
    24ac:	8d a1       	ldd	r24, Y+37	; 0x25
    24ae:	9e a1       	ldd	r25, Y+38	; 0x26
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <LCD_displayCharacter+0x160>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9a a3       	std	Y+34, r25	; 0x22
    24c6:	89 a3       	std	Y+33, r24	; 0x21
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24ca:	6b a1       	ldd	r22, Y+35	; 0x23
    24cc:	7c a1       	ldd	r23, Y+36	; 0x24
    24ce:	8d a1       	ldd	r24, Y+37	; 0x25
    24d0:	9e a1       	ldd	r25, Y+38	; 0x26
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6f a1       	ldd	r22, Y+39	; 0x27
    24e4:	78 a5       	ldd	r23, Y+40	; 0x28
    24e6:	89 a5       	ldd	r24, Y+41	; 0x29
    24e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9a a3       	std	Y+34, r25	; 0x22
    2508:	89 a3       	std	Y+33, r24	; 0x21
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_displayCharacter+0x1c0>
    250c:	89 e1       	ldi	r24, 0x19	; 25
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	98 a3       	std	Y+32, r25	; 0x20
    2512:	8f 8f       	std	Y+31, r24	; 0x1f
    2514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2516:	98 a1       	ldd	r25, Y+32	; 0x20
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCharacter+0x1ae>
    251c:	98 a3       	std	Y+32, r25	; 0x20
    251e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	89 a1       	ldd	r24, Y+33	; 0x21
    2522:	9a a1       	ldd	r25, Y+34	; 0x22
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <LCD_displayCharacter+0x1a2>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6b a1       	ldd	r22, Y+35	; 0x23
    2536:	7c a1       	ldd	r23, Y+36	; 0x24
    2538:	8d a1       	ldd	r24, Y+37	; 0x25
    253a:	9e a1       	ldd	r25, Y+38	; 0x26
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
    2548:	89 a1       	ldd	r24, Y+33	; 0x21
    254a:	9a a1       	ldd	r25, Y+34	; 0x22
    254c:	9e 8f       	std	Y+30, r25	; 0x1e
    254e:	8d 8f       	std	Y+29, r24	; 0x1d
    2550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_displayCharacter+0x1ea>
    2558:	9e 8f       	std	Y+30, r25	; 0x1e
    255a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	69 ad       	ldd	r22, Y+57	; 0x39
    2560:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePort>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	89 8f       	std	Y+25, r24	; 0x19
    256e:	9a 8f       	std	Y+26, r25	; 0x1a
    2570:	ab 8f       	std	Y+27, r26	; 0x1b
    2572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	53 e4       	ldi	r21, 0x43	; 67
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8d 8b       	std	Y+21, r24	; 0x15
    258e:	9e 8b       	std	Y+22, r25	; 0x16
    2590:	af 8b       	std	Y+23, r26	; 0x17
    2592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	69 8d       	ldd	r22, Y+25	; 0x19
    25d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <LCD_displayCharacter+0x2ac>
    25f8:	89 e1       	ldi	r24, 0x19	; 25
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_displayCharacter+0x29a>
    2608:	9a 8b       	std	Y+18, r25	; 0x12
    260a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <LCD_displayCharacter+0x28e>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_displayCharacter+0x2d6>
    2644:	98 8b       	std	Y+16, r25	; 0x10
    2646:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GPIO_writePin>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e8       	ldi	r26, 0x80	; 128
    2658:	bf e3       	ldi	r27, 0x3F	; 63
    265a:	8b 87       	std	Y+11, r24	; 0x0b
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	ad 87       	std	Y+13, r26	; 0x0d
    2660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a e7       	ldi	r20, 0x7A	; 122
    2670:	53 e4       	ldi	r21, 0x43	; 67
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8f 83       	std	Y+7, r24	; 0x07
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	a9 87       	std	Y+9, r26	; 0x09
    2680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    26a4:	6f 81       	ldd	r22, Y+7	; 0x07
    26a6:	78 85       	ldd	r23, Y+8	; 0x08
    26a8:	89 85       	ldd	r24, Y+9	; 0x09
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_displayCharacter+0x39a>
    26e6:	89 e1       	ldi	r24, 0x19	; 25
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_displayCharacter+0x388>
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <LCD_displayCharacter+0x37c>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_displayCharacter+0x3c4>
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
#endif

}
    2736:	e9 96       	adiw	r28, 0x39	; 57
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <LCD_displayString>:
/* Description: Display string on the LCD
 * Input: the address of the string to be displayed
 * Output: void
 * */
void LCD_displayString(const char *Str)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	00 d0       	rcall	.+0      	; 0x274e <LCD_displayString+0x6>
    274e:	0f 92       	push	r0
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	9b 83       	std	Y+3, r25	; 0x03
    2756:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2758:	19 82       	std	Y+1, r1	; 0x01
    275a:	0e c0       	rjmp	.+28     	; 0x2778 <LCD_displayString+0x30>
	while(Str[i] != '\0'){
		LCD_displayCharacter(Str[i]);
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	9b 81       	ldd	r25, Y+3	; 0x03
    2766:	fc 01       	movw	r30, r24
    2768:	e2 0f       	add	r30, r18
    276a:	f3 1f       	adc	r31, r19
    276c:	80 81       	ld	r24, Z
    276e:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_displayCharacter>
		i++;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	8f 5f       	subi	r24, 0xFF	; 255
    2776:	89 83       	std	Y+1, r24	; 0x01
 * Output: void
 * */
void LCD_displayString(const char *Str)
{
	uint8 i=0;
	while(Str[i] != '\0'){
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	9b 81       	ldd	r25, Y+3	; 0x03
    2782:	fc 01       	movw	r30, r24
    2784:	e2 0f       	add	r30, r18
    2786:	f3 1f       	adc	r31, r19
    2788:	80 81       	ld	r24, Z
    278a:	88 23       	and	r24, r24
    278c:	39 f7       	brne	.-50     	; 0x275c <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_moveCursor>:
/* Description: Control the position of the cursor
 * Input: the position in which row and column
 * Output: void
 * */
void LCD_moveCursor(uint8 row,uint8 col)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <LCD_moveCursor+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_moveCursor+0x8>
    27a2:	0f 92       	push	r0
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3d 83       	std	Y+5, r19	; 0x05
    27b4:	2c 83       	std	Y+4, r18	; 0x04
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	91 05       	cpc	r25, r1
    27be:	c1 f0       	breq	.+48     	; 0x27f0 <LCD_moveCursor+0x56>
    27c0:	2c 81       	ldd	r18, Y+4	; 0x04
    27c2:	3d 81       	ldd	r19, Y+5	; 0x05
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_moveCursor+0x3a>
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	9d 81       	ldd	r25, Y+5	; 0x05
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	61 f0       	breq	.+24     	; 0x27ea <LCD_moveCursor+0x50>
    27d2:	19 c0       	rjmp	.+50     	; 0x2806 <LCD_moveCursor+0x6c>
    27d4:	2c 81       	ldd	r18, Y+4	; 0x04
    27d6:	3d 81       	ldd	r19, Y+5	; 0x05
    27d8:	22 30       	cpi	r18, 0x02	; 2
    27da:	31 05       	cpc	r19, r1
    27dc:	69 f0       	breq	.+26     	; 0x27f8 <LCD_moveCursor+0x5e>
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	83 30       	cpi	r24, 0x03	; 3
    27e4:	91 05       	cpc	r25, r1
    27e6:	61 f0       	breq	.+24     	; 0x2800 <LCD_moveCursor+0x66>
    27e8:	0e c0       	rjmp	.+28     	; 0x2806 <LCD_moveCursor+0x6c>
	{
	case 0:
		address=col;
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	0b c0       	rjmp	.+22     	; 0x2806 <LCD_moveCursor+0x6c>
		break;
	case 1:
		address=col+(0x40);
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	80 5c       	subi	r24, 0xC0	; 192
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	07 c0       	rjmp	.+14     	; 0x2806 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		address=col+(0x10);
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	80 5f       	subi	r24, 0xF0	; 240
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		address=col+(0x50);
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	80 5b       	subi	r24, 0xB0	; 176
    2804:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | LCD_SET_CURSOR_LOCATION);
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	80 68       	ori	r24, 0x80	; 128
    280a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_sendCommand>
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <LCD_displayStringRowColumn>:
 * column on the LCD
 * Input: the position in which row and column and the address of the string to be displayed
 * Output: void
 * */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <LCD_displayStringRowColumn+0x6>
    2824:	00 d0       	rcall	.+0      	; 0x2826 <LCD_displayStringRowColumn+0x8>
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	6a 83       	std	Y+2, r22	; 0x02
    282e:	5c 83       	std	Y+4, r21	; 0x04
    2830:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	6a 81       	ldd	r22, Y+2	; 0x02
    2836:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_moveCursor>
	LCD_displayString(Str);
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
}
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <LCD_intgerToString>:
/* Description: Convert the data from Integer To string
 * Input: the integer data
 * Output: void
 * */
void LCD_intgerToString(int data)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	62 97       	sbiw	r28, 0x12	; 18
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	9a 8b       	std	Y+18, r25	; 0x12
    2866:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2868:	89 89       	ldd	r24, Y+17	; 0x11
    286a:	9a 89       	ldd	r25, Y+18	; 0x12
    286c:	9e 01       	movw	r18, r28
    286e:	2f 5f       	subi	r18, 0xFF	; 255
    2870:	3f 4f       	sbci	r19, 0xFF	; 255
    2872:	b9 01       	movw	r22, r18
    2874:	4a e0       	ldi	r20, 0x0A	; 10
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <itoa>
	LCD_displayString(buff);
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayString>
}
    2884:	62 96       	adiw	r28, 0x12	; 18
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <LCD_clearScreen>:
/* Description: Clear the LCD
 * Input: void
 * Output: void
 * */
void LCD_clearScreen(void)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_sendCommand>
}
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <__vector_8>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


/*ISR for the OverFlow mode*/
ISR(TIMER1_OVF_vect)
{
    28aa:	1f 92       	push	r1
    28ac:	0f 92       	push	r0
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	0f 92       	push	r0
    28b2:	11 24       	eor	r1, r1
    28b4:	2f 93       	push	r18
    28b6:	3f 93       	push	r19
    28b8:	4f 93       	push	r20
    28ba:	5f 93       	push	r21
    28bc:	6f 93       	push	r22
    28be:	7f 93       	push	r23
    28c0:	8f 93       	push	r24
    28c2:	9f 93       	push	r25
    28c4:	af 93       	push	r26
    28c6:	bf 93       	push	r27
    28c8:	ef 93       	push	r30
    28ca:	ff 93       	push	r31
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    28d4:	80 91 1d 01 	lds	r24, 0x011D
    28d8:	90 91 1e 01 	lds	r25, 0x011E
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	29 f0       	breq	.+10     	; 0x28ea <__vector_8+0x40>
	{
		/* Call the Call Back function*/
		(*g_callBackPtr)();
    28e0:	e0 91 1d 01 	lds	r30, 0x011D
    28e4:	f0 91 1e 01 	lds	r31, 0x011E
    28e8:	09 95       	icall
	}
}
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	bf 91       	pop	r27
    28f4:	af 91       	pop	r26
    28f6:	9f 91       	pop	r25
    28f8:	8f 91       	pop	r24
    28fa:	7f 91       	pop	r23
    28fc:	6f 91       	pop	r22
    28fe:	5f 91       	pop	r21
    2900:	4f 91       	pop	r20
    2902:	3f 91       	pop	r19
    2904:	2f 91       	pop	r18
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <__vector_7>:


/*ISR for the compare mode*/
ISR(TIMER1_COMPB_vect)
{
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	2f 93       	push	r18
    291c:	3f 93       	push	r19
    291e:	4f 93       	push	r20
    2920:	5f 93       	push	r21
    2922:	6f 93       	push	r22
    2924:	7f 93       	push	r23
    2926:	8f 93       	push	r24
    2928:	9f 93       	push	r25
    292a:	af 93       	push	r26
    292c:	bf 93       	push	r27
    292e:	ef 93       	push	r30
    2930:	ff 93       	push	r31
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    293a:	80 91 1d 01 	lds	r24, 0x011D
    293e:	90 91 1e 01 	lds	r25, 0x011E
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	29 f0       	breq	.+10     	; 0x2950 <__vector_7+0x40>
	{
		/* Call the Call Back function*/
		(*g_callBackPtr)();
    2946:	e0 91 1d 01 	lds	r30, 0x011D
    294a:	f0 91 1e 01 	lds	r31, 0x011E
    294e:	09 95       	icall
	}
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	ff 91       	pop	r31
    2956:	ef 91       	pop	r30
    2958:	bf 91       	pop	r27
    295a:	af 91       	pop	r26
    295c:	9f 91       	pop	r25
    295e:	8f 91       	pop	r24
    2960:	7f 91       	pop	r23
    2962:	6f 91       	pop	r22
    2964:	5f 91       	pop	r21
    2966:	4f 91       	pop	r20
    2968:	3f 91       	pop	r19
    296a:	2f 91       	pop	r18
    296c:	0f 90       	pop	r0
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	0f 90       	pop	r0
    2972:	1f 90       	pop	r1
    2974:	18 95       	reti

00002976 <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Inputs: pointer to the configuration structure with type Timer1_ConfigType.
 * Return: None
 * */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	00 d0       	rcall	.+0      	; 0x297c <Timer1_init+0x6>
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	89 83       	std	Y+1, r24	; 0x01
	/*Initial value to start count from:*/
	TCNT1=Config_Ptr->initial_value;
    2984:	ac e4       	ldi	r26, 0x4C	; 76
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	11 96       	adiw	r26, 0x01	; 1
    2992:	9c 93       	st	X, r25
    2994:	8e 93       	st	-X, r24
	 *Bit 5:4 – COM1B1:0: 	0
	 *Bit 3 – FOC1A: 		0
	 *Bit 2 – FOC1B:		0
	 *Bit 1:0 – WGM11:0:	determine The mode by the config pointer (Last two bits)
	 * */
	TCCR1A = (TCCR1A & 0xFC) |	((Config_Ptr->mode) & 0x03) ;
    2996:	af e4       	ldi	r26, 0x4F	; 79
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	ef e4       	ldi	r30, 0x4F	; 79
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	98 2f       	mov	r25, r24
    29a2:	9c 7f       	andi	r25, 0xFC	; 252
    29a4:	e9 81       	ldd	r30, Y+1	; 0x01
    29a6:	fa 81       	ldd	r31, Y+2	; 0x02
    29a8:	85 81       	ldd	r24, Z+5	; 0x05
    29aa:	83 70       	andi	r24, 0x03	; 3
    29ac:	89 2b       	or	r24, r25
    29ae:	8c 93       	st	X, r24
	 *Bit 4:3 – WGM13:2:	Determine The mode by the config pointer (First two bits)
	 *Bit 2:0 – CS12:0:		Determine The Prescaler by the config pointer
	 * */

	/*To enter The required mode:*/
	TCCR1B |= (TCCR1B & 0xE7) |	(((Config_Ptr->mode) >> 2)<< WGM12) ;
    29b0:	ae e4       	ldi	r26, 0x4E	; 78
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	ee e4       	ldi	r30, 0x4E	; 78
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	38 2f       	mov	r19, r24
    29bc:	ee e4       	ldi	r30, 0x4E	; 78
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	28 2f       	mov	r18, r24
    29c4:	27 7e       	andi	r18, 0xE7	; 231
    29c6:	e9 81       	ldd	r30, Y+1	; 0x01
    29c8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ca:	85 81       	ldd	r24, Z+5	; 0x05
    29cc:	86 95       	lsr	r24
    29ce:	86 95       	lsr	r24
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	82 2b       	or	r24, r18
    29e2:	83 2b       	or	r24, r19
    29e4:	8c 93       	st	X, r24

	/*To enter The required Clock:*/
	TCCR1B |= (TCCR1B & 0xF8) |	(Config_Ptr->prescaler);
    29e6:	ae e4       	ldi	r26, 0x4E	; 78
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	ee e4       	ldi	r30, 0x4E	; 78
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	28 2f       	mov	r18, r24
    29f2:	ee e4       	ldi	r30, 0x4E	; 78
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	98 2f       	mov	r25, r24
    29fa:	98 7f       	andi	r25, 0xF8	; 248
    29fc:	e9 81       	ldd	r30, Y+1	; 0x01
    29fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2a00:	84 81       	ldd	r24, Z+4	; 0x04
    2a02:	89 2b       	or	r24, r25
    2a04:	82 2b       	or	r24, r18
    2a06:	8c 93       	st	X, r24
	 * Bit 4 – OCIE1A:	Set to Enable Output Compare A Match Interrupt if the chosen mode is the Compare mode
	 * Bit 3 – OCIE1B:	Clear to disable Output Compare B Match Interrupt
	 * Bit 2 – TOIE1:	Set to Enable Overflow Interrupt if the chosen mode is the Normal mode
	 * */

	if(Config_Ptr->mode == CTC)
    2a08:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0c:	85 81       	ldd	r24, Z+5	; 0x05
    2a0e:	84 30       	cpi	r24, 0x04	; 4
    2a10:	71 f4       	brne	.+28     	; 0x2a2e <Timer1_init+0xb8>
	{
		/*If the mode is compare then we must assign a compare value:*/
		OCR1A=Config_Ptr->compare_value;
    2a12:	aa e4       	ldi	r26, 0x4A	; 74
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e9 81       	ldd	r30, Y+1	; 0x01
    2a18:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	9c 93       	st	X, r25
    2a22:	8e 93       	st	-X, r24

		/*Set to Enable Output Compare A Match Interrupt if the chosen mode is the Compare mode*/
		TIMSK = (1<<OCIE1A);
    2a24:	e9 e5       	ldi	r30, 0x59	; 89
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 e1       	ldi	r24, 0x10	; 16
    2a2a:	80 83       	st	Z, r24
    2a2c:	04 c0       	rjmp	.+8      	; 0x2a36 <Timer1_init+0xc0>
	}
	else
	{
		/*Set to Enable Overflow Interrupt if the chosen mode is the Normal mode*/
		TIMSK = (1<<TOIE1) ;
    2a2e:	e9 e5       	ldi	r30, 0x59	; 89
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	84 e0       	ldi	r24, 0x04	; 4
    2a34:	80 83       	st	Z, r24
	}
	SREG |=(1<<7);
    2a36:	af e5       	ldi	r26, 0x5F	; 95
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	ef e5       	ldi	r30, 0x5F	; 95
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 68       	ori	r24, 0x80	; 128
    2a42:	8c 93       	st	X, r24
}
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <Timer1_deInit>:
 * Description: Function to disable the Timer1.
 * Inputs: None
 * Return: None
 * */
void Timer1_deInit(void)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2a56:	ef e4       	ldi	r30, 0x4F	; 79
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	10 82       	st	Z, r1
	TCCR1B=0;
    2a5c:	ee e4       	ldi	r30, 0x4E	; 78
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	10 82       	st	Z, r1
	TIMSK=0;
    2a62:	e9 e5       	ldi	r30, 0x59	; 89
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	10 82       	st	Z, r1
	TCNT1 = 0;
    2a68:	ec e4       	ldi	r30, 0x4C	; 76
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
	OCR1A=0;
    2a70:	ea e4       	ldi	r30, 0x4A	; 74
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	11 82       	std	Z+1, r1	; 0x01
    2a76:	10 82       	st	Z, r1
	g_callBackPtr = NULL_PTR;
    2a78:	10 92 1e 01 	sts	0x011E, r1
    2a7c:	10 92 1d 01 	sts	0x011D, r1
}
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <Timer1_setCallBack>:
 * Description: Function to set the Call Back function address.
 * Inputs: pointer to Call Back function.
 * Return: None
 * */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <Timer1_setCallBack+0x6>
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	90 93 1e 01 	sts	0x011E, r25
    2a9c:	80 93 1d 01 	sts	0x011D, r24
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <UART_init>:

/* Description: setup and enable the UART
 * Input: Pointer To structure that contain several enum for configuration
 * Output: void
 * */
void UART_init(const UART_ConfigType *Config_Ptr){
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <UART_init+0x6>
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <UART_init+0x8>
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	8b 83       	std	Y+3, r24	; 0x03

	uint16 UBRR =0;
    2aba:	1a 82       	std	Y+2, r1	; 0x02
    2abc:	19 82       	std	Y+1, r1	; 0x01

	/*UCSRA:
	 * bit 1: set U2X for double speed
	 * */
	UCSRA = 1<<U2X;
    2abe:	eb e2       	ldi	r30, 0x2B	; 43
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	82 e0       	ldi	r24, 0x02	; 2
    2ac4:	80 83       	st	Z, r24
	 *BIT 5: clear UDRIE for disable empty reg. interrupt
	 *bit 4: set RXEN to enable receiver
	 *bit 3: set TXEN to enable transmitter
	 *bit 2: INSERT by config pointer char size
	 * */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2ac6:	ea e2       	ldi	r30, 0x2A	; 42
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	88 e1       	ldi	r24, 0x18	; 24
    2acc:	80 83       	st	Z, r24

	/*Insert bit 2 according to the data bit number which is chosen using config pointer*/
	UCSRB |= (UCSRB & 0xFB) | ((Config_Ptr->bit_data &(0x04))<<UCSZ2) ;
    2ace:	aa e2       	ldi	r26, 0x2A	; 42
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ea e2       	ldi	r30, 0x2A	; 42
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	38 2f       	mov	r19, r24
    2ada:	ea e2       	ldi	r30, 0x2A	; 42
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	2b 7f       	andi	r18, 0xFB	; 251
    2ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae8:	80 81       	ld	r24, Z
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	84 70       	andi	r24, 0x04	; 4
    2af0:	90 70       	andi	r25, 0x00	; 0
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	82 2b       	or	r24, r18
    2afc:	83 2b       	or	r24, r19
    2afe:	8c 93       	st	X, r24
	 * bit 6: 	clear for Asynchronous mode
	 * bit 5,4: INSERT by config pointer mode of parity
	 * bit 3: 	 INSERT by config pointer number of stop bits
	 * bit 2,1: INSERT by config pointer char size
	 * */
	UCSRC = (1<<URSEL) ;
    2b00:	e0 e4       	ldi	r30, 0x40	; 64
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 e8       	ldi	r24, 0x80	; 128
    2b06:	80 83       	st	Z, r24

	/*Insert bits 5,4 according to the Parity mode which is chosen using config pointer*/
	UCSRC |= (UCSRC & 0xCF) | ((Config_Ptr->parity)<<UPM0);
    2b08:	a0 e4       	ldi	r26, 0x40	; 64
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	e0 e4       	ldi	r30, 0x40	; 64
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	38 2f       	mov	r19, r24
    2b14:	e0 e4       	ldi	r30, 0x40	; 64
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	2f 7c       	andi	r18, 0xCF	; 207
    2b1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b20:	fc 81       	ldd	r31, Y+4	; 0x04
    2b22:	81 81       	ldd	r24, Z+1	; 0x01
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	82 95       	swap	r24
    2b2a:	92 95       	swap	r25
    2b2c:	90 7f       	andi	r25, 0xF0	; 240
    2b2e:	98 27       	eor	r25, r24
    2b30:	80 7f       	andi	r24, 0xF0	; 240
    2b32:	98 27       	eor	r25, r24
    2b34:	82 2b       	or	r24, r18
    2b36:	83 2b       	or	r24, r19
    2b38:	8c 93       	st	X, r24

	/*Insert bit 3 according to the STOP bit number which is chosen using config pointer*/
	UCSRC |= (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<USBS);
    2b3a:	a0 e4       	ldi	r26, 0x40	; 64
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e0 e4       	ldi	r30, 0x40	; 64
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	38 2f       	mov	r19, r24
    2b46:	e0 e4       	ldi	r30, 0x40	; 64
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	27 7f       	andi	r18, 0xF7	; 247
    2b50:	eb 81       	ldd	r30, Y+3	; 0x03
    2b52:	fc 81       	ldd	r31, Y+4	; 0x04
    2b54:	82 81       	ldd	r24, Z+2	; 0x02
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	82 2b       	or	r24, r18
    2b68:	83 2b       	or	r24, r19
    2b6a:	8c 93       	st	X, r24

	/*Insert bits 2,1 according to the data bit number which is chosen using config pointer*/
	UCSRC |= (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<UCSZ0);
    2b6c:	a0 e4       	ldi	r26, 0x40	; 64
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e0 e4       	ldi	r30, 0x40	; 64
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	38 2f       	mov	r19, r24
    2b78:	e0 e4       	ldi	r30, 0x40	; 64
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	28 2f       	mov	r18, r24
    2b80:	29 7f       	andi	r18, 0xF9	; 249
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	80 81       	ld	r24, Z
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	82 2b       	or	r24, r18
    2b92:	83 2b       	or	r24, r19
    2b94:	8c 93       	st	X, r24


	/*Equation for calculate UBRR value:*/
	UBRR =(uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2b96:	eb 81       	ldd	r30, Y+3	; 0x03
    2b98:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9a:	83 81       	ldd	r24, Z+3	; 0x03
    2b9c:	94 81       	ldd	r25, Z+4	; 0x04
    2b9e:	a5 81       	ldd	r26, Z+5	; 0x05
    2ba0:	b6 81       	ldd	r27, Z+6	; 0x06
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	aa 1f       	adc	r26, r26
    2ba8:	bb 1f       	adc	r27, r27
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	aa 1f       	adc	r26, r26
    2bb0:	bb 1f       	adc	r27, r27
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	aa 1f       	adc	r26, r26
    2bb8:	bb 1f       	adc	r27, r27
    2bba:	9c 01       	movw	r18, r24
    2bbc:	ad 01       	movw	r20, r26
    2bbe:	80 e4       	ldi	r24, 0x40	; 64
    2bc0:	92 e4       	ldi	r25, 0x42	; 66
    2bc2:	af e0       	ldi	r26, 0x0F	; 15
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodsi4>
    2bce:	da 01       	movw	r26, r20
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9a 83       	std	Y+2, r25	; 0x02
    2bd6:	89 83       	std	Y+1, r24	; 0x01

	/*enter the last 8 bits in UBRRL:*/
	UBRRL = UBRR;
    2bd8:	e9 e2       	ldi	r30, 0x29	; 41
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	80 83       	st	Z, r24
	/*Enter the first 4 bits in UBRRH:*/
	UBRRH = (UBRR>>8);
    2be0:	e0 e4       	ldi	r30, 0x40	; 64
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	89 2f       	mov	r24, r25
    2bea:	99 27       	eor	r25, r25
    2bec:	80 83       	st	Z, r24
}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <UART_sendByte>:

/* Description: Send the data from UDR
 * Input: data to be sent
 * Output: void
 * */
void UART_sendByte(uint8 data){
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	0f 92       	push	r0
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	89 83       	std	Y+1, r24	; 0x01
	/*check if the UDR register is empty*/
	while(BIT_IS_CLEAR(UCSRA,5)){}
    2c08:	eb e2       	ldi	r30, 0x2B	; 43
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	80 72       	andi	r24, 0x20	; 32
    2c14:	90 70       	andi	r25, 0x00	; 0
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	b9 f3       	breq	.-18     	; 0x2c08 <UART_sendByte+0xc>

	/*Write the data to be sent*/
	UDR = data;
    2c1a:	ec e2       	ldi	r30, 0x2C	; 44
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	80 83       	st	Z, r24
}
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <UART_receiveByte>:

/* Description: Receive data from UART from the UDR
 * Input: void
 * Output: uint8 (data)
 * */
uint8 UART_receiveByte(){
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
	/*check if the UDR register received all the data*/
	while(BIT_IS_CLEAR(UCSRA,7)){}
    2c32:	eb e2       	ldi	r30, 0x2B	; 43
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	88 23       	and	r24, r24
    2c3a:	dc f7       	brge	.-10     	; 0x2c32 <UART_receiveByte+0x8>

	/*Read the received data*/
	return UDR;
    2c3c:	ec e2       	ldi	r30, 0x2C	; 44
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
}
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <UART_sendString>:

/* Description: Send string using UART
 * Input:  location of the string that will be sent
 * Output: void
 * */
void UART_sendString(const uint8 *str){
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <UART_sendString+0x6>
    2c4e:	0f 92       	push	r0
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9b 83       	std	Y+3, r25	; 0x03
    2c56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	0e c0       	rjmp	.+28     	; 0x2c78 <UART_sendString+0x30>
	/*extract each char(byte) and send it byte by byte*/
	while(str[i] != '\0'){
		UART_sendByte(str[i]);
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	fc 01       	movw	r30, r24
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f3 1f       	adc	r31, r19
    2c6c:	80 81       	ld	r24, Z
    2c6e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <UART_sendByte>
		i++;
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	89 83       	std	Y+1, r24	; 0x01
 * Output: void
 * */
void UART_sendString(const uint8 *str){
	uint8 i=0;
	/*extract each char(byte) and send it byte by byte*/
	while(str[i] != '\0'){
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	9b 81       	ldd	r25, Y+3	; 0x03
    2c82:	fc 01       	movw	r30, r24
    2c84:	e2 0f       	add	r30, r18
    2c86:	f3 1f       	adc	r31, r19
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 23       	and	r24, r24
    2c8c:	39 f7       	brne	.-50     	; 0x2c5c <UART_sendString+0x14>
		UART_sendByte(str[i]);
		i++;
	}
}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <UART_receiveString>:

/* Description: Receive string using UART
 * Input:  Address of the string that will be store the received data
 * Output: void
 * */
void UART_receiveString(uint8 *str){
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <UART_receiveString+0xa>
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	9b 83       	std	Y+3, r25	; 0x03
    2cac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2cae:	19 82       	std	Y+1, r1	; 0x01

	/*Receive first byte*/
	str[i] = UART_receiveByte();
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cba:	8c 01       	movw	r16, r24
    2cbc:	02 0f       	add	r16, r18
    2cbe:	13 1f       	adc	r17, r19
    2cc0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_receiveByte>
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	80 83       	st	Z, r24
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <UART_receiveString+0x4e>

	/*check if it's the last byte*/
	while(str[i] != '#'){
		i++;
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	8f 5f       	subi	r24, 0xFF	; 255
    2cce:	89 83       	std	Y+1, r24	; 0x01
		/*receive byte by byte until the # and store in the address of the str*/
		str[i]=UART_receiveByte();
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cda:	8c 01       	movw	r16, r24
    2cdc:	02 0f       	add	r16, r18
    2cde:	13 1f       	adc	r17, r19
    2ce0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_receiveByte>
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	80 83       	st	Z, r24

	/*Receive first byte*/
	str[i] = UART_receiveByte();

	/*check if it's the last byte*/
	while(str[i] != '#'){
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	80 81       	ld	r24, Z
    2cfa:	83 32       	cpi	r24, 0x23	; 35
    2cfc:	31 f7       	brne	.-52     	; 0x2cca <UART_receiveString+0x30>
		/*receive byte by byte until the # and store in the address of the str*/
		str[i]=UART_receiveByte();
	}

	/*Add the null sign to form the popular form of a string to use it later*/
	str[i] = '\0';
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	9b 81       	ldd	r25, Y+3	; 0x03
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e2 0f       	add	r30, r18
    2d0c:	f3 1f       	adc	r31, r19
    2d0e:	10 82       	st	Z, r1
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	08 95       	ret

00002d20 <__udivmodsi4>:
    2d20:	a1 e2       	ldi	r26, 0x21	; 33
    2d22:	1a 2e       	mov	r1, r26
    2d24:	aa 1b       	sub	r26, r26
    2d26:	bb 1b       	sub	r27, r27
    2d28:	fd 01       	movw	r30, r26
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <__udivmodsi4_ep>

00002d2c <__udivmodsi4_loop>:
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	ee 1f       	adc	r30, r30
    2d32:	ff 1f       	adc	r31, r31
    2d34:	a2 17       	cp	r26, r18
    2d36:	b3 07       	cpc	r27, r19
    2d38:	e4 07       	cpc	r30, r20
    2d3a:	f5 07       	cpc	r31, r21
    2d3c:	20 f0       	brcs	.+8      	; 0x2d46 <__udivmodsi4_ep>
    2d3e:	a2 1b       	sub	r26, r18
    2d40:	b3 0b       	sbc	r27, r19
    2d42:	e4 0b       	sbc	r30, r20
    2d44:	f5 0b       	sbc	r31, r21

00002d46 <__udivmodsi4_ep>:
    2d46:	66 1f       	adc	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	1a 94       	dec	r1
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <__udivmodsi4_loop>
    2d52:	60 95       	com	r22
    2d54:	70 95       	com	r23
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	9b 01       	movw	r18, r22
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	bd 01       	movw	r22, r26
    2d60:	cf 01       	movw	r24, r30
    2d62:	08 95       	ret

00002d64 <__prologue_saves__>:
    2d64:	2f 92       	push	r2
    2d66:	3f 92       	push	r3
    2d68:	4f 92       	push	r4
    2d6a:	5f 92       	push	r5
    2d6c:	6f 92       	push	r6
    2d6e:	7f 92       	push	r7
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	ca 1b       	sub	r28, r26
    2d8e:	db 0b       	sbc	r29, r27
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	09 94       	ijmp

00002d9c <__epilogue_restores__>:
    2d9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9e:	39 88       	ldd	r3, Y+17	; 0x11
    2da0:	48 88       	ldd	r4, Y+16	; 0x10
    2da2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2daa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dae:	b9 84       	ldd	r11, Y+9	; 0x09
    2db0:	c8 84       	ldd	r12, Y+8	; 0x08
    2db2:	df 80       	ldd	r13, Y+7	; 0x07
    2db4:	ee 80       	ldd	r14, Y+6	; 0x06
    2db6:	fd 80       	ldd	r15, Y+5	; 0x05
    2db8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dba:	1b 81       	ldd	r17, Y+3	; 0x03
    2dbc:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbe:	b9 81       	ldd	r27, Y+1	; 0x01
    2dc0:	ce 0f       	add	r28, r30
    2dc2:	d1 1d       	adc	r29, r1
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	ed 01       	movw	r28, r26
    2dd0:	08 95       	ret

00002dd2 <itoa>:
    2dd2:	fb 01       	movw	r30, r22
    2dd4:	9f 01       	movw	r18, r30
    2dd6:	e8 94       	clt
    2dd8:	42 30       	cpi	r20, 0x02	; 2
    2dda:	c4 f0       	brlt	.+48     	; 0x2e0c <itoa+0x3a>
    2ddc:	45 32       	cpi	r20, 0x25	; 37
    2dde:	b4 f4       	brge	.+44     	; 0x2e0c <itoa+0x3a>
    2de0:	4a 30       	cpi	r20, 0x0A	; 10
    2de2:	29 f4       	brne	.+10     	; 0x2dee <itoa+0x1c>
    2de4:	97 fb       	bst	r25, 7
    2de6:	1e f4       	brtc	.+6      	; 0x2dee <itoa+0x1c>
    2de8:	90 95       	com	r25
    2dea:	81 95       	neg	r24
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	64 2f       	mov	r22, r20
    2df0:	77 27       	eor	r23, r23
    2df2:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__udivmodhi4>
    2df6:	80 5d       	subi	r24, 0xD0	; 208
    2df8:	8a 33       	cpi	r24, 0x3A	; 58
    2dfa:	0c f0       	brlt	.+2      	; 0x2dfe <itoa+0x2c>
    2dfc:	89 5d       	subi	r24, 0xD9	; 217
    2dfe:	81 93       	st	Z+, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	a1 f7       	brne	.-24     	; 0x2dee <itoa+0x1c>
    2e06:	16 f4       	brtc	.+4      	; 0x2e0c <itoa+0x3a>
    2e08:	5d e2       	ldi	r21, 0x2D	; 45
    2e0a:	51 93       	st	Z+, r21
    2e0c:	10 82       	st	Z, r1
    2e0e:	c9 01       	movw	r24, r18
    2e10:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <strrev>

00002e14 <strrev>:
    2e14:	dc 01       	movw	r26, r24
    2e16:	fc 01       	movw	r30, r24
    2e18:	67 2f       	mov	r22, r23
    2e1a:	71 91       	ld	r23, Z+
    2e1c:	77 23       	and	r23, r23
    2e1e:	e1 f7       	brne	.-8      	; 0x2e18 <strrev+0x4>
    2e20:	32 97       	sbiw	r30, 0x02	; 2
    2e22:	04 c0       	rjmp	.+8      	; 0x2e2c <strrev+0x18>
    2e24:	7c 91       	ld	r23, X
    2e26:	6d 93       	st	X+, r22
    2e28:	70 83       	st	Z, r23
    2e2a:	62 91       	ld	r22, -Z
    2e2c:	ae 17       	cp	r26, r30
    2e2e:	bf 07       	cpc	r27, r31
    2e30:	c8 f3       	brcs	.-14     	; 0x2e24 <strrev+0x10>
    2e32:	08 95       	ret

00002e34 <__udivmodhi4>:
    2e34:	aa 1b       	sub	r26, r26
    2e36:	bb 1b       	sub	r27, r27
    2e38:	51 e1       	ldi	r21, 0x11	; 17
    2e3a:	07 c0       	rjmp	.+14     	; 0x2e4a <__udivmodhi4_ep>

00002e3c <__udivmodhi4_loop>:
    2e3c:	aa 1f       	adc	r26, r26
    2e3e:	bb 1f       	adc	r27, r27
    2e40:	a6 17       	cp	r26, r22
    2e42:	b7 07       	cpc	r27, r23
    2e44:	10 f0       	brcs	.+4      	; 0x2e4a <__udivmodhi4_ep>
    2e46:	a6 1b       	sub	r26, r22
    2e48:	b7 0b       	sbc	r27, r23

00002e4a <__udivmodhi4_ep>:
    2e4a:	88 1f       	adc	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	5a 95       	dec	r21
    2e50:	a9 f7       	brne	.-22     	; 0x2e3c <__udivmodhi4_loop>
    2e52:	80 95       	com	r24
    2e54:	90 95       	com	r25
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	08 95       	ret

00002e5c <_exit>:
    2e5c:	f8 94       	cli

00002e5e <__stop_program>:
    2e5e:	ff cf       	rjmp	.-2      	; 0x2e5e <__stop_program>
